<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common validation bean definitions.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        ***********************************
        ***                             ***
        ***   P A R E N T   B E A N S   ***
        ***                             ***
        ***********************************
    -->
    
    <!--
        check_xslt_parent
        
        Parent (template) for XSLT-based checking stages.
    -->
    <bean id="check_xslt_parent" class="net.shibboleth.metadata.dom.XSLValidationStage"
        parent="stage_parent" abstract="true"/>
    
    
    <!--
        ***********************************
        ***                             ***
        ***   F U T U R E   T E S T S   ***
        ***                             ***
        ***********************************
        
        The tests in this section are not applied to the UK federation metadata at the moment,
        but will be in the future.  Usually, the delay is due to the presence of the specific
        case in the current metadata, and the test will be moved into production once that
        has been cleaned up.  In some cases, this can be a lengthy process.
        
        The main check_future test is broken down into a number of sub-tests rather than
        just writing it as one long XSLT ruleset so that overlapping failures can all be
        seen at the same time.  This isn't so important in production, where any failure
        is definitive.  It's much more important while cleaning up existing metadata, where
        it's less productive to clear up one problem only to have another one emerge from
        hiding.
    -->
    
    <!--
        check_future_0
    -->
    <bean id="check_future_0" p:id="check_future_0" parent="check_xslt_parent">
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_future.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_future_1
    -->
    <bean id="check_future_1" p:id="check_future_1" parent="check_xslt_parent">
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_future_1.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_future_2
    -->
    <bean id="check_future_2" p:id="check_future_2" parent="check_xslt_parent">
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_future_2.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_future
        
        Combines all check_future_N stages.
    -->
    <bean id="check_future" p:id="check_future" parent="composite_parent">
        <property name="composedStages">
            <list>
                <ref bean="check_future_0"/>
                <ref bean="check_future_1"/>
                <ref bean="check_future_2"/>
            </list>
        </property>
    </bean>
    

    <!--
        *********************
        ***               ***
        ***   ( E N D )   ***
        ***               ***
        *********************
    -->
    

    <!--
        check_adfs
    -->
    <bean id="check_adfs" class="net.shibboleth.metadata.dom.XSLValidationStage"
        lazy-init="true" init-method="initialize">
        <property name="id" value="check_adfs"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_adfs.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_aggregate
    -->
    <bean id="check_aggregate" class="net.shibboleth.metadata.dom.XSLValidationStage"
        lazy-init="true" init-method="initialize">
        <property name="id" value="check_aggregate"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_aggregate.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_filtered
    -->
    <bean id="check_filtered" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_filtered"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_filtered.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_fixups
    -->
    <bean id="check_fixups" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_fixups"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_fixups.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_idpdisc
    -->
    <bean id="check_idpdisc" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_idpdisc"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_idpdisc.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_imported
    -->
    <bean id="check_imported" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_imported"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_imported.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_init
    -->
    <bean id="check_init" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_init"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_init.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_mdiop
    -->
    <bean id="check_mdiop" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdiop"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_mdiop.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        *************************************************
        ***                                           ***
        ***   M D R P I   S P E C I F I C A T I O N   ***
        ***                                           ***
        *************************************************
    -->
    
    <!--
        check_mdrpi_xslt
        
        Miscellaneous MDRPI tests, in XSLT.
    -->
    <bean id="check_mdrpi_xslt" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdrpi_xslt"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_mdrpi.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_mdrpi
        
        Composite check for the MDRPI specification.
    -->
    <bean id="check_mdrpi" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdrpi"/>
        <property name="composedStages">
            <list>
                <ref bean="check_mdrpi_xslt"/>
            </list>
        </property>
    </bean>
    
    <!--
        check_regauth_parent
        
        Parent (template) for per-channel beans.
        
        Any registrationAuthority already present on an entity in this
        channel must match the known registration authority value.
    -->
    <bean id="check_regauth_parent" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true" abstract="true">
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/check_regauth.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        ***********************************************
        ***                                         ***
        ***   M D U I   S P E C I F I C A T I O N   ***
        ***                                         ***
        ***********************************************
    -->
    
    <!--
        check_mdui_iphint
        
        Checks for the mdui:IPHint element.
    -->
    <bean id="check_mdui_iphint" class="uk.org.ukfederation.mda.validate.mdui.IPHintValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdui_iphint"/>
        <property name="checkingNetworks" value="true"/>
    </bean>
    
    <!--
        check_mdui_xslt
        
        Miscellaneous MDUI tests, in XSLT.
    -->
    <bean id="check_mdui_xslt" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdui_xslt"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_mdui.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_mdui
        
        Composite check for the MDUI specification.
    -->
    <bean id="check_mdui" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdui"/>
        <property name="composedStages">
            <list>
                <ref bean="check_mdui_iphint"/>
                <ref bean="check_mdui_xslt"/>
            </list>
        </property>
    </bean>
    
    <!--
        *********************
        ***               ***
        ***   ( E N D )   ***
        ***               ***
        *********************
    -->
    
    <!--
        check_misc
    -->
    <bean id="check_misc" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_misc"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_misc.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_namespaces
    -->
    <bean id="check_namespaces" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_namespaces"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_namespaces.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_nokeyname
    -->
    <bean id="check_nokeyname" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_nokeyname"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_nokeyname.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_regscope
        
        Check for regular expressions in Shibboleth Scope elements.  Applied very selectively.
    -->
    <bean id="check_regscope" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_regscope"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/check_regscope.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_reqattr
    -->
    <bean id="check_reqattr" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_reqattr"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_reqattr.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_saml2int
    -->
    <bean id="check_saml2int" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2int"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2int.xsl"/>
            </bean>
        </property>
    </bean>

    <!--
        check_saml1
    -->
    <bean id="check_saml1" p:id="check_saml1" parent="check_xslt_parent">
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml1.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_saml2
    -->
    <bean id="check_saml2" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_saml2meta
    -->
    <bean id="check_saml2meta" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2meta"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2meta.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_shibboleth
    -->
    <bean id="check_shibboleth" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_shibboleth"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_shibboleth.xsl"/>
            </bean>
        </property>
    </bean>

    <!--
        check_validUntil
        
        Check that an aggregate has a validUntil instant specified, and that it has not
        yet expired.  Does not put an upper bound on validUntil intervals.
    -->
    <bean id="check_validUntil" class="net.shibboleth.metadata.dom.saml.ValidateValidUntilStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_validUntil"/>
        <!--
            The validUntil attribute must be present.
        -->
        <property name="requireValidUntil" value="true"/>
        <!--
            Do not constrain the validity interval in this general stage.
            Constrain in necessary on a per-channel basis.
        -->
        <property name="maxValidityInterval" value="0"/>
    </bean>
    
    <!--
        check_vhosts
    -->
    <bean id="check_vhosts" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_vhosts"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_vhosts.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        CHECK_std
    -->
    <bean id="CHECK_std" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="CHECK_std"/>
        <property name="composedStages">
            <list>
                <ref bean="check_adfs"/>
                <ref bean="check_idpdisc"/>
                <ref bean="check_init"/>
                <ref bean="check_mdiop"/>
                <ref bean="check_mdrpi"/>
                <ref bean="check_mdui"/>
                <ref bean="check_misc"/>
                <ref bean="check_namespaces"/>
                <ref bean="check_reqattr"/>
                <ref bean="check_saml1"/>
                <ref bean="check_saml2"/>
                <ref bean="check_saml2int"/>
                <ref bean="check_saml2meta"/>
                <ref bean="check_shibboleth"/>
            </list>
        </property>
    </bean>
    
    <!--
        CHECK_imported
    -->
    <bean id="CHECK_imported" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="CHECK_imported"/>
        <property name="composedStages">
            <list>
                <ref bean="CHECK_std"/>
                <ref bean="check_future"/>
                <ref bean="check_regscope"/>
            </list>
        </property>
    </bean>
    
</beans>
