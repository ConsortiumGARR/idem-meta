<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common validation bean definitions.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        check_adfs
    -->
    <bean id="check_adfs" class="net.shibboleth.metadata.dom.XSLValidationStage"
        lazy-init="true" init-method="initialize">
        <property name="id" value="check_adfs"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_adfs.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_filtered
    -->
    <bean id="check_filtered" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_filtered"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_filtered.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_fixups
    -->
    <bean id="check_fixups" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_fixups"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_fixups.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_future
    -->
    <bean id="check_future" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_future"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_future.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_idpdisc
    -->
    <bean id="check_idpdisc" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_idpdisc"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_idpdisc.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_imported
    -->
    <bean id="check_imported" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_imported"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_imported.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_init
    -->
    <bean id="check_init" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_init"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_init.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_mdiop
    -->
    <bean id="check_mdiop" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdiop"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_mdiop.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_mdui
    -->
    <bean id="check_mdui" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_mdui"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_mdui.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_misc
    -->
    <bean id="check_misc" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_misc"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_misc.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_namespaces
    -->
    <bean id="check_namespaces" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_namespaces"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_namespaces.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_nokeyname
    -->
    <bean id="check_nokeyname" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_nokeyname"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_nokeyname.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_saml2int
    -->
    <bean id="check_saml2int" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2int"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2int.xsl"/>
            </bean>
        </property>
    </bean>

    <!--
        check_saml2
    -->
    <bean id="check_saml2" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_saml2meta
    -->
    <bean id="check_saml2meta" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_saml2meta"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_saml2meta.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_shibboleth
    -->
    <bean id="check_shibboleth" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_shibboleth"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_shibboleth.xsl"/>
            </bean>
        </property>
    </bean>

    <!--
        check_validUntil
        
        Check that an aggregate has a validUntil instant specified, and that it has not
        yet expired.  Does not put an upper bound on validUntil intervals.
    -->
    <bean id="check_validUntil" class="net.shibboleth.metadata.dom.saml.ValidateValidUntilStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_validUntil"/>
        <!--
            The validUntil attribute must be present.
        -->
        <property name="requireValidUntil" value="true"/>
        <!--
            Do not constrain the validity interval in this general stage.
            Constrain in necessary on a per-channel basis.
        -->
        <property name="maxValidityInterval" value="0"/>
    </bean>
    
    <!--
        check_vhosts
    -->
    <bean id="check_vhosts" class="net.shibboleth.metadata.dom.XSLValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="check_vhosts"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/check_vhosts.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        CHECK_std
    -->
    <bean id="CHECK_std" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="CHECK_std"/>
        <property name="composedStages">
            <list>
                <ref bean="check_adfs"/>
                <ref bean="check_idpdisc"/>
                <ref bean="check_init"/>
                <ref bean="check_mdiop"/>
                <ref bean="check_mdui"/>
                <ref bean="check_misc"/>
                <ref bean="check_namespaces"/>
                <ref bean="check_saml2"/>
                <ref bean="check_saml2meta"/>
                <ref bean="check_shibboleth"/>
            </list>
        </property>
    </bean>
    
    <!--
        CHECK_imported
    -->
    <bean id="CHECK_imported" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="CHECK_imported"/>
        <property name="composedStages">
            <list>
                <ref bean="CHECK_std"/>
                <ref bean="check_future"/>
                <ref bean="check_saml2int"/>
            </list>
        </property>
    </bean>
    
    <!--
        CHECK_publishable
    -->
    <bean id="CHECK_publishable" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="CHECK_publishable"/>
        <property name="composedStages">
            <list>
                <ref bean="check_filtered"/>
                <ref bean="check_fixups"/>
            </list>
        </property>
    </bean>
    
</beans>
