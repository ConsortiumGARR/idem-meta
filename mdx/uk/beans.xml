<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common beans for this channel.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        uk_federation_uri
        
        URI for the UK federation.  Used in several contexts:
        
        * as the Name attribute for the main EntitiesDescriptor in UK federation metadata
          (not always the document element)
          
        * in mdrpi:RegistrationInfo, as the unique identifier for the UK federation registrar
        
        * in mdrpi:PublicationInfo, as the unique identifier for the UK federation publisher
    -->
    <bean id="uk_federation_uri" class="java.lang.String">
        <constructor-arg value="http://ukfederation.org.uk"/>
    </bean>


    <!--
        uk_fetchFragmentFiles
        
        Collects all the UK metadata "fragment files" from the /entities directory.
        
        Each fragment file contains a single EntityDescriptor.  The name of each
        eligible file matches a particular regular expression.
    -->
    <bean id="uk_fetchFragmentFiles" parent="stage_parent"
        class="net.shibboleth.metadata.dom.DomFilesystemSourceStage"
        p:id="uk_fetchFragmentFiles">
        <property name="parserPool" ref="parserPool"/>
        <property name="source">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/entities"/>
            </bean>
        </property>
        <property name="sourceFileFilter">
            <bean class="uk.org.ukfederation.mda.RegexFileFilter">
                <constructor-arg value="uk\d{6}.xml"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_processScopes
        
        This stage normalises scope handling in two ways particular to the UK
        federation:
        
        * we make all three potential scope lists equivalent (on the entity, on
        the IDPSSODescriptor and on the AttributeAuthority)
        
        * we inject scopes "pushed" to entities from the members.xml file
        
        This transform can be run on individual EntityDescriptors or on an
        aggregate EntitiesDescriptor.
    -->
    <bean id="uk_processScopes" parent="xslt_parent"
        p:id="uk_processScopes">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/scopes.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="members" value-ref="uk_members"/>
            </map>
        </property>
    </bean>
    
    
    <!--
        uk_membersResource
        
        A Resource referencing the members.xml document.
    -->
    <bean id="uk_membersResource" parent="file_parent">
        <constructor-arg value="#{ systemProperties['basedir'] }/xml/members.xml"/>
    </bean>
    
    
    <!--
        uk_membersDocument
        
        This bean contains the contents of the members.xml file as a DOM Document.
    -->
    <bean id="uk_membersDocument" class="net.shibboleth.ext.spring.factory.DomDocumentFactoryBean">
        <property name="documentResource" ref="uk_membersResource"/>
        <property name="parserPool" ref="parserPool"/>
    </bean>
    
    
    <!--
        uk_members
        
        This bean implements an API for access to the contents of the members.xml document.
    -->
    <bean id="uk_members" class="uk.org.ukfederation.members.Members">
        <constructor-arg>
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/members.xml"/>
            </bean>
        </constructor-arg>
    </bean>
    
    
    <!--
        uk_fix_mailto
        
        Adds "mailto:" to md:EmailAddress elements which don't already have it.
    -->
    <bean id="uk_fix_mailto" parent="xslt_parent"
        p:id="uk_fix_mailto">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/fix_mailto.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_hide_idps
        
        Hide IdPs (which we assume have been imported) from the WAYF/CDS.

        Requires that IdPs already have EntityDescriptor/Extensions elements to put
        the HideFromWAYF element into.
    -->
    <bean id="uk_hide_idps" parent="xslt_parent"
        p:id="uk_hide_idps">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/hide_idps.xsl"/>
            </bean>
        </property>
    </bean>


    <!--
        check_ukreg
        
        Checks specific to the UK registrar function.
    -->
    <bean id="check_ukreg" parent="check_xslt_parent"
        p:id="check_ukreg">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/check_ukreg.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="members" value-ref="uk_members"/>
            </map>
        </property>
    </bean>
    
    
    <!--
        uk_checkPublishable
        
        Check an aggregate metadata document for publishability.  This is applied during
        all UK publication flows prior to any signature step.  It is not applied to
        export flows, for which we desire the closest possible correspondence to
        the registered metadata.
    -->
    <bean id="uk_checkPublishable" parent="composite_parent"
        p:id="uk_checkPublishable">
        <property name="composedStages">
            <list>
                <ref bean="checkSchemas"/>
                <ref bean="check_aggregate"/>
                <ref bean="check_filtered"/>
                <ref bean="check_fixups"/>
            </list>
        </property>
    </bean>
    

    <!--
        uk_trustRootsDocument
        
        This bean contains the contents of the master.xml file as a DOM Document.
    -->
    <bean id="uk_trustRootsDocument" class="net.shibboleth.ext.spring.factory.DomDocumentFactoryBean">
        <property name="parserPool" ref="parserPool"/>
        <property name="documentResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/master.xml"/>
            </bean>
        </property>
    </bean>    
    
    
    <!--
        uk_addTrustRoots
        
        This stage adds the UK federation trust roots to an EntitiesDescriptor.
    -->
    <bean id="uk_addTrustRoots" parent="xslt_parent"
        p:id="uk_addTrustRoots">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/trust-roots.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="trustRootsDocument" value-ref="uk_trustRootsDocument"/>
            </map>
        </property>
    </bean>
    

    <!--
        uk_processFragment
        
        This stage performs any standard cleanup required for UK federation fragment files.
    -->
    <bean id="uk_processFragment" parent="xslt_parent"
        p:id="uk_processFragment">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/fragment.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_stripAdminContacts
        
        Remove any md:ContactPerson elements with contactType of "administrative".
    -->
    <bean id="uk_stripAdminContacts" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.ContactPersonFilterStage"
        p:id="uk_stripAdminContacts">
        <property name="designatedTypes">
            <list>
                <value>administrative</value>
            </list>
        </property>
        <property name="whitelistingTypes" value="false"/>
    </bean>
    
    
    <!--
        uk_performFixups
        
        This stage performs any fixup actions required before publication to UK federation members.
    -->
    <bean id="uk_performFixups" parent="xslt_parent"
        p:id="uk_performFixups">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/fixups.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        Populate UKId values from entities.
    -->
    <bean id="uk_populateIds" parent="stage_parent"
        class="uk.org.ukfederation.mda.EntityDescriptorUKIdPopulationStage"
        p:id="uk_populateIds"/>
    

    <!--
        UK federation named EntitiesDescriptor assembler pipeline stage.
        
        Name attribute is set to the federation URI.  UK ordering is applied.
    -->
    <bean id="uk_assemble" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        p:id="uk_assemble">
        <property name="descriptorName" ref="uk_federation_uri"/>
        <property name="itemOrderingStrategy">
            <bean class="uk.org.ukfederation.mda.UKEntityOrderingStrategy"/>
        </property>
    </bean>
    

    <!--
        UK federation unnamed EntitiesDescriptor assembler pipeline stage.
        
        Name attribute is not set.  UK ordering is applied.
    -->
    <bean id="uk_assembleUnnamed" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        p:id="uk_assembleUnnamed">
        <property name="itemOrderingStrategy">
            <bean class="uk.org.ukfederation.mda.UKEntityOrderingStrategy"/>
        </property>
    </bean>
    

    <!--
        Fetch and process the registered entities as a collection.
    -->
    <bean id="uk_registeredEntities" parent="composite_parent"
        p:id="uk_registeredEntities">
        <property name="composedStages">
            <list>
                <ref bean="uk_fetchFragmentFiles"/>
                <ref bean="uk_processFragment"/>
                <ref bean="uk_processScopes"/>
                <ref bean="populateItemIds"/>
                <ref bean="uk_populateIds"/>
                <ref bean="uk_default_regauth"/>
                
                <ref bean="checkSchemas"/>
                <ref bean="CHECK_std"/>
                <ref bean="check_ukreg"/>
                
                <!-- failure of any check on registered metadata is fatal -->
                <ref bean="errorTerminatingFilter"/>
            </list>
        </property>
    </bean>
    
    
    <!--
        uk_stripExtensions
        
        Strip those UK federation extensions which we never publish.
    -->
    <bean id="uk_stripExtensions" parent="xslt_parent"
        p:id="uk_stripExtensions">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/strip_extensions.xsl"/>
            </bean>
        </property>
    </bean>
    

    <!--
        ***********************************************
        ***                                         ***
        ***   N A M E S P A C E   H A N D L I N G   ***
        ***                                         ***
        ***********************************************
    -->
    
    <!--
        uk_normaliseNamespaces
        
        A pipeline stage that can be used before serialisation to normalise the namespaces
        used in an XML document.  This one is UK-specific, as it makes specific choices
        in order to limit the number of prefixes used.
    -->
    <bean id="uk_normaliseNamespaces" parent="xslt_parent"
        p:id="uk_normaliseNamespaces">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_uk.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        *************************************************
        ***                                           ***
        ***   M D R P I   S P E C I F I C A T I O N   ***
        ***                                           ***
        *************************************************
    -->
    
    <!--
        uk_check_regauth
        
        Any registrationAuthority already present on an entity in this
        channel must match the known registration authority value.
    -->
    <bean id="uk_check_regauth"  parent="check_regauth_parent"
        p:id="uk_check_regauth">
        <property name="transformParameters">
            <map>
                <entry key="expectedAuthority" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <!--
        uk_default_regauth
        
        Provide a default registrationAuthority appropriate to
        this channel.
    -->
    <bean id="uk_default_regauth" parent="default_regauth_parent"
        p:id="uk_default_regauth">
        <property name="transformParameters">
            <map>
                <entry key="defaultAuthority" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <!--
        *********************************************
        ***                                       ***
        ***   S T A T I S T I C S   O U T P U T   ***
        ***                                       ***
        *********************************************
    -->
    
    <!--
        uk_serializeStatistics
        
        Serialise the (assumed HTML) DomDocumentItem into the UK federation statistics
        output file in the production XML directory.
    -->
    <bean id="uk_serializeStatistics" parent="serialize_parent"
        p:id="uk_serializeStatistics">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-stats.html"/>
            </bean>
        </property>
    </bean>
    
    <!--
        uk_generateStatistics
        
        Input is an aggregate of all registered entities, output is the HTML statistics.
    -->
    <bean id="uk_generateStatistics" parent="xslt_parent"
        p:id="uk_generateStatistics">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/statistics.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="memberDocument" value-ref="uk_membersDocument"/>
            </map>
        </property>
    </bean>
    
    <!--
        uk_statisticsPipeline
        
        Pipeline to generate the registrar statistics for the UK federation's
        registered entities.  Input is assumed to be a collection of the entities in question;
        resulting HTML output is written into the appropriate file in the production
        XML directory.
    -->
    <bean id="uk_statisticsPipeline" parent="pipeline_parent"
        p:id="uk_statisticsPipeline">
        <property name="stages">
            <list>
                <ref bean="assemble"/>
                <ref bean="uk_generateStatistics"/>
                <ref bean="uk_serializeStatistics"/>
            </list>
        </property>
    </bean>
    
</beans>
