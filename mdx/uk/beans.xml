<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common beans for this channel.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        Location of various resources.
    -->
    <bean id="uk_productionAggregate_url" class="java.lang.String">
        <constructor-arg value="http://metadata.ukfederation.org.uk/ukfederation-metadata.xml"/>
    </bean>
    <bean id="uk_exportAggregate_url" class="java.lang.String">
        <constructor-arg value="http://metadata.ukfederation.org.uk/ukfederation-export.xml"/>
    </bean>
    
    
    <!--
        uk_federation_uri
        
        URI for the UK federation.  Used in several contexts:
        
        * as the Name attribute for the main EntitiesDescriptor in UK federation metadata
          (not always the document element)
          
        * in mdrpi:RegistrationInfo, as the unique identifier for the UK federation registrar
        
        * in mdrpi:PublicationInfo, as the unique identifier for the UK federation publisher
    -->
    <bean id="uk_federation_uri" class="java.lang.String">
        <constructor-arg value="http://ukfederation.org.uk"/>
    </bean>


    <!--
        Fetch the export aggregate.
    -->
    <bean id="uk_exportAggregate" parent="DOMResourceSourceStage"
        p:id="uk_exportAggregate">
        <property name="DOMResource">
            <bean parent="HTTPResource">
                <constructor-arg name="client" ref="httpClient"/>
                <constructor-arg name="url" ref="uk_exportAggregate_url"/>        
            </bean>
        </property>
    </bean>
    
    
    <!--
        Fetch the production aggregate.
    -->
    <bean id="uk_productionAggregate" parent="DOMResourceSourceStage"
        p:id="uk_productionAggregate">
        <property name="DOMResource">
            <bean parent="HTTPResource">
                <constructor-arg name="client" ref="httpClient"/>
                <constructor-arg name="url" ref="uk_productionAggregate_url"/>        
            </bean>
        </property>
    </bean>
    
    
    <!--
        Metadata signing certificate.
    -->
    <bean id="uk_signingCertificate" parent="X509CertificateFactoryBean">
        <property name="certificateFile">
            <bean class="java.io.File">
                <constructor-arg value="${basedir}/mdx/uk/ukfederation-2012.pem"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        Check the signature on a document.
    -->
    <bean id="uk_checkSignature" parent="XMLSignatureValidationStage"
        p:id="uk_checkSignature">
        <property name="verificationCertificate" ref="uk_signingCertificate"/>
    </bean>
    
    
    <!--
        uk_check_validUntil
        
        Check that an aggregate has a validUntil instant specified, and that it has not
        yet expired.  Sets a bound of 30 days on the validity interval; 14 days is the
        expected value.
    -->
    <bean id="uk_check_validUntil" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.ValidateValidUntilStage"
        p:id="uk_check_validUntil">
        <!--
            The validUntil attribute must be present.
        -->
        <property name="requireValidUntil" value="true"/>
        <!--
            Validity interval must not exceed 30 days.
        -->
        <property name="maxValidityInterval" value="#{ 1000L * 60 * 60 * 24 * 30 }"/>
    </bean>
    
    
    <!--
        uk_fetchFragmentFiles
        
        Collects all the UK metadata "fragment files" from the /entities directory.
        
        Each fragment file contains a single EntityDescriptor.  The name of each
        eligible file matches a particular regular expression.
    -->
    <bean id="uk_fetchFragmentFiles" parent="stage_parent"
        class="net.shibboleth.metadata.dom.DOMFilesystemSourceStage"
        p:id="uk_fetchFragmentFiles">
        <property name="parserPool" ref="parserPool"/>
        <property name="source">
            <bean class="java.io.File">
                <constructor-arg value="${basedir}/entities"/>
            </bean>
        </property>
        <property name="sourceFileFilter">
            <bean class="uk.org.ukfederation.mda.RegexFileFilter">
                <constructor-arg value="uk\d{6}.xml"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_processScopes
        
        This stage normalises scope handling in two ways particular to the UK
        federation:
        
        * we make all three potential scope lists equivalent (on the entity, on
        the IDPSSODescriptor and on the AttributeAuthority)
        
        * we inject scopes "pushed" to entities from the members.xml file
        
        This transform can be run on individual EntityDescriptors or on an
        aggregate EntitiesDescriptor.
    -->
    <bean id="uk_processScopes" parent="XSLTransformationStage"
        p:id="uk_processScopes">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/scopes.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="members" value-ref="uk_members"/>
            </map>
        </property>
    </bean>
    
    
    <!--
        uk_membersResource
        
        A Resource referencing the members.xml document.
    -->
    <bean id="uk_membersResource" parent="FileSystemResource">
        <constructor-arg value="${basedir}/xml/members.xml"/>
    </bean>
    
    
    <!--
        uk_membersDocument
        
        This bean contains the contents of the members.xml file as a DOM Document.
    -->
    <bean id="uk_membersDocument" parent="DOMDocumentFactoryBean">
        <property name="documentResource" ref="uk_membersResource"/>
        <property name="parserPool" ref="parserPool"/>
    </bean>
    
    
    <!--
        uk_members
        
        This bean implements an API for access to the contents of the members.xml document.
    -->
    <bean id="uk_members" class="uk.org.ukfederation.members.Members">
        <constructor-arg>
            <bean class="java.io.File">
                <constructor-arg value="${basedir}/xml/members.xml"/>
            </bean>
        </constructor-arg>
    </bean>
    
    
    <!--
        uk_fix_mailto
        
        Adds "mailto:" to md:EmailAddress elements which don't already have it.
    -->
    <bean id="uk_fix_mailto" parent="XSLTransformationStage"
        p:id="uk_fix_mailto">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/fix_mailto.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_hide_idps
        
        Hide IdPs (which we assume have been imported) from the WAYF/CDS.

        Requires that IdPs already have EntityDescriptor/Extensions elements to put
        the HideFromWAYF element into.
    -->
    <bean id="uk_hide_idps" parent="XSLTransformationStage"
        p:id="uk_hide_idps">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/hide_idps.xsl"/>
            </bean>
        </property>
    </bean>


    <!--
        check_ukreg
        
        Checks specific to the UK registrar function.
    -->
    <bean id="check_ukreg" parent="XSLValidationStage"
        p:id="check_ukreg">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/check_ukreg.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="members" value-ref="uk_members"/>
            </map>
        </property>
    </bean>
    
    
    <!--
        check_uk_keydesc_key
    -->
    <bean id="check_uk_keydesc_key" parent="XSLValidationStage"
        p:id="check_uk_keydesc_key">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/check_uk_keydesc_key.xsl"/>
            </bean>
        </property>
    </bean>


    <!--
        check_uk_mdattr
    -->
    <bean id="check_uk_mdattr" parent="XSLValidationStage"
        p:id="check_uk_mdattr">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/check_uk_mdattr.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        check_uk_mdrps
    -->
    <bean id="check_uk_mdrps" parent="XSLValidationStage"
        p:id="check_uk_mdrps">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/check_uk_mdrps.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        check_uk_urlenc
    -->
    <bean id="check_uk_urlenc" parent="XSLValidationStage"
        p:id="check_uk_urlenc">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/check_uk_urlenc.xsl"/>
            </bean>
        </property>
    </bean>
    

    <!--
        uk_trustRootsDocument
        
        This bean contains the contents of the trust roots file as a DOM Document.
    -->
    <bean id="uk_trustRootsDocument" parent="DOMDocumentFactoryBean">
        <property name="parserPool" ref="parserPool"/>
        <property name="documentResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/trust-roots.xml"/>
            </bean>
        </property>
    </bean>    
    
    
    <!--
        uk_addTrustRoots
        
        This stage adds the UK federation trust roots to an EntitiesDescriptor.
    -->
    <bean id="uk_addTrustRoots" parent="XSLTransformationStage"
        p:id="uk_addTrustRoots">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/trust-roots.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="trustRootsDocument" value-ref="uk_trustRootsDocument"/>
            </map>
        </property>
    </bean>
    

    <!--
        uk_processFragment
        
        This stage performs any standard cleanup required for UK federation fragment files.
    -->
    <bean id="uk_processFragment" parent="XSLTransformationStage"
        p:id="uk_processFragment">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/fragment.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        uk_stripAdminContacts
        
        Remove any md:ContactPerson elements with contactType of "administrative".
    -->
    <bean id="uk_stripAdminContacts" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.ContactPersonFilterStage"
        p:id="uk_stripAdminContacts">
        <property name="designatedTypes">
            <list>
                <value>administrative</value>
            </list>
        </property>
        <property name="whitelistingTypes" value="false"/>
    </bean>
    
    
    <!--
        Populate UKId values from entities.
    -->
    <bean id="uk_populateIds" parent="stage_parent"
        class="uk.org.ukfederation.mda.EntityDescriptorUKIdPopulationStage"
        p:id="uk_populateIds"/>
    

    <!--
        UK federation named EntitiesDescriptor assembler pipeline stage.
        
        Name attribute is set to the federation URI.  UK ordering is applied.
    -->
    <bean id="uk_assemble" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        p:id="uk_assemble">
        <property name="descriptorName" ref="uk_federation_uri"/>
        <property name="itemOrderingStrategy">
            <bean class="uk.org.ukfederation.mda.UKEntityOrderingStrategy"/>
        </property>
    </bean>
    

    <!--
        UK federation unnamed EntitiesDescriptor assembler pipeline stage.
        
        Name attribute is not set.  UK ordering is applied.
    -->
    <bean id="uk_assembleUnnamed" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        p:id="uk_assembleUnnamed">
        <property name="itemOrderingStrategy">
            <bean class="uk.org.ukfederation.mda.UKEntityOrderingStrategy"/>
        </property>
    </bean>
    

    <!--
        Fetch and process the registered entities as a collection.
    -->
    <bean id="uk_registeredEntities" parent="CompositeStage"
        p:id="uk_registeredEntities">
        <property name="composedStages">
            <list>
                <ref bean="uk_fetchFragmentFiles"/>
                <ref bean="uk_processFragment"/>
                <ref bean="uk_processScopes"/>
                <ref bean="populateItemIds"/>
                <ref bean="uk_populateIds"/>
                <ref bean="uk_default_regauth"/>
                <ref bean="populateRegistrationAuthorities"/>
                
                <ref bean="checkSchemas"/>
                <ref bean="CHECK_std"/>
                <ref bean="check_ukreg"/>
                <ref bean="check_uk_keydesc_key"/>
                <ref bean="check_uk_mdattr"/>
                <ref bean="check_uk_mdrps"/>
                <ref bean="check_uk_urlenc"/>
                <ref bean="mdui_dn_en_present"/>
                <ref bean="mdui_dn_en_match"/>
                <ref bean="check_dup_display"/>
                
                <bean parent="X509ValidationStage"
                    p:id="checkCertificates">
                    <property name="validators">
                        <list>
                            <!-- Error on RSA key length less than 2048 bits. -->
                            <bean parent="X509RSAKeyLengthValidator"
                                p:warningBoundary="0" p:errorBoundary="2048"/>
                            <!-- Error on small RSA public exponents. -->
                            <bean parent="X509RSAExponentValidator"/>
                            <!-- Error on inconsistent subjectAltNames. -->
                            <bean parent="X509ConsistentNameValidator"/>
                            
                            <!--
                                Debian weak key blacklists.
                                
                                Don't need to check for keys below our minimum key size.
                            -->
                            <ref bean="debian.2048"/>
                            <ref bean="debian.4096"/>
                            
                            <!--
                                Compromised key blacklists.
                                
                                Again, don't need to check for keys below our minimum key size.
                            -->
                            <ref bean="compromised.2048"/>
                        </list>
                    </property>
                </bean>

                <!-- failure of any check on registered metadata is fatal -->
                <ref bean="errorTerminatingFilter"/>
            </list>
        </property>
    </bean>
    
    
    <!--
        uk_stripExtensions
        
        Strip those UK federation extensions which we never publish.
    -->
    <bean id="uk_stripExtensions" parent="XSLTransformationStage"
        p:id="uk_stripExtensions">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/strip_extensions.xsl"/>
            </bean>
        </property>
    </bean>
    

    <!--
        ***********************************************
        ***                                         ***
        ***   N A M E S P A C E   H A N D L I N G   ***
        ***                                         ***
        ***********************************************
    -->
    
    <!--
        uk_normaliseNamespaces
        
        A pipeline stage that can be used before serialisation to normalise the namespaces
        used in an XML document.  This one is UK-specific, as it makes specific choices
        in order to limit the number of prefixes used.
    -->
    <bean id="uk_normaliseNamespaces" parent="XSLTransformationStage"
        p:id="uk_normaliseNamespaces">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="${basedir}/mdx/uk/ns_norm_uk.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        *************************************************
        ***                                           ***
        ***   M D R P I   S P E C I F I C A T I O N   ***
        ***                                           ***
        *************************************************
    -->
    
    <!--
        uk_check_regauth
        
        Any registrationAuthority already present on an entity in this
        channel must match the known registration authority value.
    -->
    <bean id="uk_check_regauth"  parent="check_regauth_parent"
        p:id="uk_check_regauth">
        <property name="transformParameters">
            <map>
                <entry key="expectedAuthority" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <!--
        uk_default_regauth
        
        Provide a default registrationAuthority appropriate to
        this channel.
    -->
    <bean id="uk_default_regauth" parent="default_regauth_parent"
        p:id="uk_default_regauth">
        <property name="transformParameters">
            <map>
                <entry key="defaultAuthority" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <!--
        *********************************************
        ***                                       ***
        ***   S T A T I S T I C S   O U T P U T   ***
        ***                                       ***
        *********************************************
    -->
    
    <!--
        uk_serializeStatistics
        
        Serialise the (assumed HTML) DomDocumentItem into the UK federation statistics
        output file in the production XML directory.
    -->
    <bean id="uk_serializeStatistics" parent="SerializationStage"
        p:id="uk_serializeStatistics">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="${basedir}/xml/ukfederation-stats.html"/>
            </bean>
        </property>
    </bean>
    
    <!--
        uk_generateStatistics
        
        Input is an aggregate of all registered entities, output is the HTML statistics.
    -->
    <bean id="uk_generateStatistics" parent="XSLTransformationStage"
        p:id="uk_generateStatistics">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/statistics.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="memberDocument" value-ref="uk_membersDocument"/>
            </map>
        </property>
    </bean>
    
    <!--
        uk_statisticsPipeline
        
        Pipeline to generate the registrar statistics for the UK federation's
        registered entities.  Input is assumed to be a collection of the entities in question;
        resulting HTML output is written into the appropriate file in the production
        XML directory.
    -->
    <bean id="uk_statisticsPipeline" parent="SimplePipeline"
        p:id="uk_statisticsPipeline">
        <property name="stages">
            <list>
                <ref bean="assemble"/>
                <ref bean="uk_generateStatistics"/>
                <ref bean="uk_serializeStatistics"/>
            </list>
        </property>
    </bean>
    
    <!--
        #################################################
        ###                                           ###
        ###   U K   E X P O R T   A S   I M P O R T   ###
        ###                                           ###
        #################################################
    -->
    
    <!--
        Fetch the export entities as a collection.
    -->
    <bean id="uk_exportedEntities" parent="CompositeStage"
        p:id="uk_exportedEntities">
        <property name="composedStages">
            <list>
                <ref bean="uk_exportAggregate"/>
                
                <!--
                    Check for fatal errors at the aggregate level:
                        missing or expired validUntil attribute
                        invalid signature
                -->
                <ref bean="uk_check_validUntil"/>
                <ref bean="uk_checkSignature"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="disassemble"/>
                
                <ref bean="uk_default_regauth"/>
                <ref bean="uk_check_regauth"/>
            </list>
        </property>
    </bean>
    
</beans>
