<?xml version="1.0" encoding="UTF-8"?>
<!--
    Miscellaneous UK channel verbs.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        Import commonly used beans.
    -->
    <import resource="../common-beans.xml"/>
    
    <!--
        Import channel-specific beans.
    -->
    <import resource="beans.xml"/>
    
    <!--
        ***************************************
        ***                                 ***
        ***   V E R B   P I P E L I N E S   ***
        ***                                 ***
        ***************************************
    -->
    
    <!--
        statistics
        
        Stand-alone statistics generation.
    -->
    <bean id="statistics" parent="pipeline_parent"
        p:id="statistics">
        <property name="stages">
            <list>
                <ref bean="uk_registeredEntities"/>
                <ref bean="assemble"/>
                <ref bean="uk_generateStatistics"/>
                <ref bean="uk_serializeStatistics"/>
            </list>
        </property>
    </bean>

    <!--
        sp_mdui_test
        
        Generates a page of links to discovery services, for each SP that
        has mdui:uiinfo metadata.
    -->
    <bean id="sp_mdui_test" parent="pipeline_parent"
        p:id="sp_mdui_test">
        <property name="stages">
            <list>
                <ref bean="uk_registeredEntities"/>
                <ref bean="assemble"/>
                <bean id="process" parent="xslt_parent"
                    p:id="process">
                    <property name="xslResource">
                        <bean parent="file_parent">
                            <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/sp_mdui_test.xsl"/>
                        </bean>
                    </property>
                </bean>
                <bean id="serialize" parent="serialize_parent"
                    p:id="serialize">
                    <property name="outputFile">
                        <bean class="java.io.File">
                            <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/temp.html"/>
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
        *********************************
        ***                           ***
        ***   C H E C K   P O R T S   ***
        ***                           ***
        *********************************
    -->
    
    <bean id="checkPorts" parent="pipeline_parent"
        p:id="checkPorts">
        <property name="stages">
            <list>
                <ref bean="uk_registeredEntities"/>
                
                <!--
                    The next four stages ensure that any errors are reported
                    in entity ID order, even on systems where the native order
                    (which tends to reflect the file enumeration ordering)
                    is arbitrary.  Ideally this should be handled by an optional
                    ordering strategy on the announcing filter.
                -->
                <ref bean="uk_assemble"/>
                <ref bean="disassemble"/>
                <ref bean="populateItemIds"/>
                <ref bean="uk_populateIds"/>
                
                <ref bean="check_vhosts"/>
                <ref bean="errorAnnouncingFilter"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***********************************
        ***                             ***
        ***   C H E C K   F U T U R E   ***
        ***                             ***
        ***********************************
    -->
    
    <bean id="checkFuture" parent="pipeline_parent"
        p:id="checkFuture">
        <property name="stages">
            <list>
                <ref bean="uk_registeredEntities"/>

                <!--
                    The next four stages ensure that any errors are reported
                    in entity ID order, even on systems where the native order
                    (which tends to reflect the file enumeration ordering)
                    is arbitrary.  Ideally this should be handled by an optional
                    ordering strategy on the announcing filter.
                -->
                <ref bean="uk_assemble"/>
                <ref bean="disassemble"/>
                <ref bean="populateItemIds"/>
                <ref bean="uk_populateIds"/>
                
                <ref bean="check_future"/>
                <ref bean="errorAnnouncingFilter"/>
            </list>
        </property>
    </bean>
    
    <!--
        *****************************************
        ***                                   ***
        ***   M E T A D A T A   I M P O R T   ***
        ***                                   ***
        *****************************************
    -->
    
    <!--
        fetchImportMetadata
        
        Fetches the contents of the file used to hold metadata to be imported
        into a UK federation fragment file.
    -->
    <bean id="fetchImportMetadata" parent="domFileStage_parent"
        p:id="fetchImportMetadata">
        <property name="source">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/entities/import.xml"/>
            </bean>
        </property>
    </bean>
    
    <!--
        fetchImportedMetadata
        
        Fetches the contents of the file used to hold metadata just imported
        by the federation's import transform.
    -->
    <bean id="fetchImportedMetadata" parent="domFileStage_parent"
        p:id="fetchImportedMetadata">
        <property name="source">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/entities/imported.xml"/>
            </bean>
        </property>
    </bean>

    <!--
        serializeImportedMetadata
        
        Serialise the fragment file just imported.
    -->
    <bean id="serializeImportedMetadata" parent="serialize_parent"
        p:id="serializeImportedMetadata">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/entities/imported.xml"/>
            </bean>
        </property>
    </bean>

    <!--
        import
        
        Pipeline to import a metadata fragment file.
        
        For now, just the head of that pipeline.
    -->
    <bean id="import" parent="pipeline_parent"
        p:id="import">
        <property name="stages">
            <list>
                <!-- fetch the input file -->
                <ref bean="fetchImportMetadata"/>
                <ref bean="populateItemIds"/>
                
                <!-- perform schema validation and stop immediately if this fails -->
                <ref bean="checkSchemas"/>
                <ref bean="errorTerminatingFilter"/>
                
                <!-- transform into a fragment using our local conventions -->
                <bean id="importTransform" parent="xslt_parent"
                    p:id="importTransform">
                    <property name="xslResource">
                        <bean parent="file_parent">
                            <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/import.xsl"/>
                        </bean>
                    </property>
                </bean>
                
                <!-- normalise namespaces in a specific way -->
                <bean id="normalizeFragment" parent="xslt_parent"
                    p:id="normalizeFragment">
                    <property name="xslResource">
                        <bean parent="file_parent">
                            <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_fragment.xsl"/>
                        </bean>
                    </property>
                </bean>
                
                <!-- check the transformed input -->
                <ref bean="checkSchemas"/>
                <ref bean="CHECK_std"/>
                <ref bean="check_future"/>
                <ref bean="check_imported"/>
                <ref bean="check_vhosts"/>
                <ref bean="errorTerminatingFilter"/>
                
                <!-- write output file -->
                <ref bean="serializeImportedMetadata"/>
            </list>
        </property>
    </bean>

    <!--
        #################################################
        ###                                           ###
        ###   U K   E X P O R T   A S   I M P O R T   ###
        ###                                           ###
        #################################################
    -->
    
    <bean id="serializeImported" parent="serialize_parent"
        p:id="serializeImported">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/imported.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="importExported" parent="pipeline_parent"
        p:id="importExported">
        <property name="stages">
            <list>
                <ref bean="uk_exportedEntities"/>
                <ref bean="standardImportTail"/>
                <ref bean="serializeImported"/>
            </list>
        </property>
    </bean>
    
    <bean id="importExportedRaw" parent="pipeline_parent"
        p:id="importExportedRaw">
        <property name="stages">
            <list>
                <ref bean="uk_exportAggregate"/>
                <ref bean="serializeImported"/>
            </list>
        </property>
    </bean>
    
    <alias alias="import"    name="importExported"/>
    <alias alias="importRaw" name="importExportedRaw"/>    
</beans>
