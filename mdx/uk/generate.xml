<?xml version="1.0" encoding="UTF-8"?>
<!--
    Verb to generate all UK aggregates.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        Import commonly used beans.
    -->
    <import resource="classpath:common-beans.xml"/>
    
    <!--
        Import channel-specific beans.
    -->
    <import resource="classpath:uk/beans.xml"/>
    <import resource="classpath:uk/blacklist.xml"/>
    
    <!--
        Import beans from other channels.
    -->
    <import resource="classpath:us_incommon/beans.xml"/>
    <import resource="classpath:int_edugain/beans.xml"/>


    <!--
        *****************************
        ***                       ***
        ***   U T I L I T I E S   ***
        ***                       ***
        *****************************
    -->
    
    <!--
        stripEntityScopes
    
        Remove entity-level Scope elements, leaving only the ones associated
        with role descriptors.    
    -->
    <bean id="stripEntityScopes" parent="XSLTransformationStage"
        p:id="stripEntityScopes">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/entity_scopes.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        finalise_parent
        
        Template for a stage used in each output pipeline which performs
        final tweaks on the document.
    -->
    <bean id="finalise_parent" abstract="true" parent="XSLTransformationStage">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/final_tweak.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    
    <!--
        ***********************
        ***                 ***
        ***   F I X U P S   ***
        ***                 ***
        ***********************
    -->
    
    <!--
        Published UK federation metadata for consumption by federation
        members has a couple of restrictions arising from known bugs in
        early software.  We address these by "fixups" which transform the
        metadata into a form which doesn't trigger the bug, and verify that
        each constraints is met before publication.
        
        We apply fixups "late" in each publication pipeline, so that
        the metadata is only transformed if required for a particular
        output document.  Our export aggregate, for example, does
        not have any of the fixups applied.
        
        In the long term, we'd hope to retire these fixups entirely as the
        software they to cater for is retired.
    -->
    
    <!--
        fixup_EncryptionMethod
        
        Remove all md:EncryptionMethod elements.
        
        This is normally done to avoid triggering a problem in OpenSAML-C 2.0.
        
        See https://wiki.shibboleth.net/confluence/display/SHIB2/MetadataCorrectness#MetadataCorrectness-Version20
    -->
    <bean id="fixup_EncryptionMethod" parent="ElementStrippingStage"
        p:id="fixup_EncryptionMethod"
        p:elementName="EncryptionMethod"
        p:elementNamespace="urn:oasis:names:tc:SAML:2.0:metadata"/>
    
    <!--
        fixup_keyuse
        
        Patch any @use-less KeyName descriptors in IdP roles
        for the benefit of Shib SPs pre-1.3.1.
    -->
    <bean id="fixup_keyuse" parent="XSLTransformationStage"
        p:id="fixup_keyuse">
        <property name="XSLResource">
            <bean parent="ClassPathResource">
                <constructor-arg value="uk/fixup_keyuse.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        performOtherFixups
        
        Perform all fixup actions which are required for *every* output document.
        
        Fixup actions which are only required in specific output pipelines need to
        appear there individually.
    -->
    <bean id="performOtherFixups" parent="CompositeStage"
        p:id="performOtherFixups">
        <property name="composedStages">
            <list>
                <ref bean="fixup_keyuse"/>
            </list>
        </property>
    </bean>
    
    <!--
        check_fixup_encmethod
    -->
    <bean id="check_fixup_encmethod" parent="XSLValidationStage"
        p:id="check_fixup_encmethod">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/check_fixup_encmethod.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_fixup_keyuse
    -->
    <bean id="check_fixup_keyuse" parent="XSLValidationStage"
        p:id="check_fixup_keyuse">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/check_fixup_keyuse.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        checkPublishable
        
        Check an aggregate metadata document for publishability.  This is applied during
        all UK publication flows prior to any signature step.  It is not applied to
        export flows, for which we desire the closest possible correspondence to
        the registered metadata.
    -->
    <bean id="checkPublishable" parent="CompositeStage"
        p:id="checkPublishable">
        <property name="composedStages">
            <list>
                <ref bean="checkSchemas"/>
                <ref bean="check_aggregate"/>
                <ref bean="check_filtered"/>
                <ref bean="check_fixup_keyuse"/>
                <ref bean="check_namespaces"/>
            </list>
        </property>
    </bean>
    
    <!--
        *******************************************
        ***                                     ***
        ***   I M P O R T   P I P E L I N E S   ***
        ***                                     ***
        *******************************************
    -->

    <!--
        removeUKEntities
        
        Filter out entities which declare themselves as registered
        by the UK federation.  We don't want those coming back in
        from another registrar or metadata exchange as they may be
        old versions of entities we have deregistered, or spoofed.
    -->
    <bean id="removeUKEntities" parent="EntityRegistrationAuthorityFilterStage"
        p:id="removeUKEntities">
        <property name="designatedRegistrationAuthorities">
            <list>
                <ref bean="uk_federation_uri"/>
            </list>
        </property>
        <property name="requiringRegistrationInformation" value="true"/>
        <property name="whitelistingRegistrationAuthorities" value="false"/>
    </bean>

    <!--
        removeBlacklistedEntities
        
        Filter out entities which are included in our global import blacklist.
    -->
    <bean id="removeBlacklistedEntities" parent="stage_parent"
        class="net.shibboleth.metadata.dom.saml.EntityFilterStage"
        p:id="removeBlacklistedEntities"
        p:whitelistingEntities="false"
        p:designatedEntities-ref="importEntityBlacklist"/>

    <!--
        importCommonTail
        
        Common actions to be performed on each import pipeline.
    -->
    <bean id="importCommonTail" parent="CompositeStage"
        p:id="importCommonTail">
        <property name="composedStages">
            <list>
                <ref bean="removeUKEntities"/>
                <ref bean="removeBlacklistedEntities"/>
                <ref bean="standardImportActions"/>
                
                <!--
                    Silently remove entities which are marked as
                    having errors.
                -->
                <ref bean="errorRemover"/>
                
                <ref bean="uk_fix_mailto"/>
            </list>
        </property>
    </bean>

    <bean id="uk_int_edugain_importPipeline" parent="SimplePipeline"
        p:id="uk_int_edugain_importPipeline">
        <property name="stages">
            <list>
                <ref bean="int_edugain_productionEntities"/>
                <ref bean="importCommonTail"/>
            </list>
        </property>
    </bean>
    
    <bean id="uk_us_incommon_importPipeline" parent="SimplePipeline"
        p:id="uk_us_incommon_importPipeline">
        <property name="stages">
            <list>
                <ref bean="us_incommon_exportedEntities"/>
                <ref bean="importCommonTail"/>
                <ref bean="uk_hide_idps"/>
            </list>
        </property>
    </bean>
    
    
    <!--
        ***************************************************
        ***                                             ***
        ***   P R O D U C T I O N   A G G R E G A T E   ***
        ***                                             ***
        ***************************************************
    -->
    
    <bean id="uk_finaliseProduction" parent="finalise_parent"
        p:id="uk_finaliseProduction">
        <property name="transformParameters">
            <map>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>

    <bean id="serializeUnsignedProductionAggregate" parent="SerializationStage"
        p:id="serializeUnsignedProductionAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-metadata-unsigned.xml"/>
            </bean>
        </property>
    </bean>

    <bean id="uk_productionPipeline" parent="SimplePipeline"
        p:id="uk_productionPipeline">
        <property name="stages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="uk_assemble"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseProduction"/>
                <ref bean="uk_normaliseNamespaces"/>
                
                <!-- production aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedProductionAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***************************************
        ***                                 ***
        ***   W A Y F   A G G R E G A T E   ***
        ***                                 ***
        ***************************************
    -->
    
    <bean id="uk_wayfSelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[not(md:Extensions/wayf:HideFromWAYF)]"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <bean id="serializeUnsignedWayfAggregate" parent="SerializationStage"
        p:id="serializeUnsignedWayfAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-wayf-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_wayfPipeline" parent="SimplePipeline"
        p:id="uk_wayfPipeline">
        <property name="stages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="uk_assemble"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_finaliseProduction"/>
                <ref bean="uk_normaliseNamespaces"/>

                <!-- WAYF aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>

                <ref bean="serializeUnsignedWayfAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***************************************
        ***                                 ***
        ***   C D S   A G G R E G A T E S   ***
        ***                                 ***
        ***************************************
    -->
    
    <!--
        CDSStripUnwanted
        
        The CDS needs only a very restricted subset of
        normal metadata in order to do its job.  This stage
        removes everything it does not need.
    -->
    <bean id="CDSStripUnwanted" parent="CompositeStage"
        p:id="CDSStripUnwanted">
        <property name="composedStages">
            <list>
                <ref bean="stripComments"/>
                
                <ref bean="stripAlgNamespace"/>
                <ref bean="stripInitNamespace"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="stripMdrpiNamespace"/>
                <ref bean="stripUkfedlabelNamespace"/>
                <ref bean="stripWayfNamespace"/>
                
                <ref bean="stripArtifactResolutionService"/>
                <ref bean="stripAttributeAuthorityDescriptor"/>
                <ref bean="stripAttributeConsumingService"/>
                <ref bean="stripContactPerson"/>
                <ref bean="stripKeyDescriptor"/>
                <ref bean="stripManageNameIDService"/>
                <ref bean="stripNameIDFormat"/>
                <ref bean="stripSingleLogoutService"/>
                
                <ref bean="stripShibScope"/>
                
                <!-- remove any now-empty Extensions elements -->
                <ref bean="removeEmptyExtensions"/>
            </list>
        </property>
    </bean>
    
    <bean id="CDSFinalise" parent="finalise_parent"
        p:id="CDSFinalise">
        <property name="transformParameters">
            <map>
                <entry key="extraText"
                    value="Central Discovery Service metadata; not for end entity use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="CDSNormaliseNamespaces" parent="XSLTransformationStage"
        p:id="CDSNormaliseNamespaces">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_cds.xsl"/>
            </bean>
        </property>
    </bean>

    <!--
        *******************************************
        ***                                     ***
        ***   C D S A L L   A G G R E G A T E   ***
        ***                                     ***
        *******************************************
    -->
    
    <!--
        Entities in the CDSALL aggregate are restricted to those entities registered by the
        UK federation plus all identity providers from whatever source.
    -->
    <bean id="CDSAllSelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[md:IDPSSODescriptor or
            md:Extensions/mdrpi:RegistrationInfo/@registrationAuthority = 'http://ukfederation.org.uk']"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <bean id="serializeCDSAllAggregate" parent="SerializationStage"
        p:id="serializeCDSAllAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-cdsall-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="CDSAllPipeline" parent="SimplePipeline"
        p:id="CDSAllPipeline">
        <property name="stages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <!-- make an aggregate first so that we're only traversing one item -->
                <ref bean="uk_assemble"/>
                
                <!-- remove many things that the CDS doesn't look at -->
                <ref bean="CDSStripUnwanted"/>
                
                <ref bean="CDSFinalise"/>
                <ref bean="CDSNormaliseNamespaces"/>
                
                <!-- schema validity check MUST pass -->
                <ref bean="checkSchemas"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeCDSAllAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***********************************************
        ***                                         ***
        ***   F A L L B A C K   A G G R E G A T E   ***
        ***                                         ***
        ***********************************************
    -->
    
    <bean id="uk_finaliseFallback" parent="finalise_parent"
        p:id="uk_finaliseFallback">
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Feature fallback metadata; not for production use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseFallback" parent="XSLTransformationStage"
        p:id="uk_normaliseFallback">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_back.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="serializeUnsignedFallbackAggregate" parent="SerializationStage"
        p:id="serializeUnsignedFallbackAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-back-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_fallbackPipeline" parent="SimplePipeline"
        p:id="uk_fallbackPipeline">
        <property name="stages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="uk_assemble"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="removeEmptyExtensions"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseFallback"/>
                <ref bean="uk_normaliseFallback"/>
                
                <!-- fallback aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedFallbackAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***************************************
        ***                                 ***
        ***   T E S T   A G G R E G A T E   ***
        ***                                 ***
        ***************************************
    -->
    
    <bean id="uk_finaliseTest" parent="finalise_parent"
        p:id="uk_finaliseTest">
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Feature test metadata; not for production use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseTest" parent="XSLTransformationStage"
        p:id="uk_normaliseTest">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_test.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="serializeUnsignedTestAggregate" parent="SerializationStage"
        p:id="serializeUnsignedTestAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-test-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_testPipeline" parent="CompositeStage"
        p:id="uk_testPipeline">
        <property name="composedStages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="uk_assemble"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseTest"/>
                <ref bean="uk_normaliseTest"/>
                
                <!-- test aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedTestAggregate"/>
            </list>
        </property>
    </bean>

    <!--
        *******************************************
        ***                                     ***
        ***   E X P O R T   A G G R E G A T E   ***
        ***                                     ***
        *******************************************
    -->
    
    <bean id="uk_finaliseExport" parent="finalise_parent"
        p:id="uk_finaliseExport">
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Prototype export metadata; not for production use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseExport" parent="XSLTransformationStage"
        p:id="uk_normaliseExport">
        <property name="XSLResource">
            <bean parent="FileSystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_export.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_exportSelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[md:Extensions/ukfedlabel:ExportOptIn]"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <bean id="serializeUnsignedExportAggregate" parent="SerializationStage"
        p:id="serializeUnsignedExportAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-export-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_exportPipeline" parent="SimplePipeline"
        p:id="uk_exportPipeline">
        <property name="stages">
            <list>
                <!--
                    Enforce IdP display name uniqueness before assembling aggregate
                -->
                <ref bean="check_dup_display"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="stripUkfedlabelNamespace"/>
                <ref bean="stripWayfNamespace"/>
                <ref bean="stripKeyNames"/>
                <ref bean="uk_assemble"/>
                <ref bean="stripMdattrNamespace"/>
                <ref bean="stripEntityScopes"/>
                <ref bean="removeEmptyExtensions"/>
                <ref bean="uk_finaliseExport"/>
                <ref bean="uk_normaliseExport"/>
                
                <!--
                    Schema validity and other checks MUST pass.
                    
                    These are a subset of the publishability tests applied to
                    aggregates published to federation members.
                -->
                <ref bean="checkSchemas"/>
                <ref bean="check_aggregate"/>
                <ref bean="check_namespaces"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedExportAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        *************************************
        ***                               ***
        ***   C M S   A G G R E G A T E   ***
        ***                               ***
        *************************************
    -->
    
    <!--
        Produces an aggregate which is consumed by the helpdesk's
        call management system. This will be well-formed XML
        but will NOT be schema valid, as many required elements
        are removed to give a smaller output file.
    -->
    
    <!--
        CMSStripUnwanted
        
        The CMS needs only a very restricted subset of
        normal metadata in order to do its job.  This stage
        removes everything it does not need.
    -->
    <bean id="CMSStripUnwanted" parent="CompositeStage"
        p:id="CMSStripUnwanted">
        <property name="composedStages">
            <list>
                <ref bean="stripComments"/>
                
                <ref bean="stripAlgNamespace"/>
                <ref bean="stripIdpdiscNamespace"/>
                <ref bean="stripInitNamespace"/>
                <ref bean="stripMdattrNamespace"/>
                
                <ref bean="stripArtifactResolutionService"/>
                <ref bean="stripAssertionConsumerService"/>
                <ref bean="stripAttributeAuthorityDescriptor"/>
                <ref bean="stripKeyDescriptor"/>
                <ref bean="stripManageNameIDService"/>
                <ref bean="stripNameIDFormat"/>
                <ref bean="stripSingleLogoutService"/>
                <ref bean="stripSingleSignOnService"/>
                
                <ref bean="stripMDUIDiscoHints"/>
                
                <ref bean="stripEntityScopes"/>
                
                <!-- remove any now-empty Extensions elements -->
                <ref bean="removeEmptyExtensions"/>
            </list>
        </property>
    </bean>
    
    <bean id="CMSFinalise" parent="finalise_parent"
        p:id="CMSFinalise">
        <property name="transformParameters">
            <map>
                <entry key="extraText"
                    value="Call Management System metadata; not for end entity use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="serializeCMSAggregate" parent="SerializationStage"
        p:id="serializeCMSaggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/cms-metadata.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="CMSPipeline" parent="SimplePipeline"
        p:id="CMSPipeline">
        <property name="stages">
            <list>
                <!-- make an aggregate first so that we're only traversing one item -->
                <ref bean="uk_assemble"/>
                
                <!-- remove many things that the CMS doesn't look at -->
                <ref bean="CMSStripUnwanted"/>
                
                <ref bean="CMSFinalise"/>
                <ref bean="normaliseNamespaces"/>
                
                <ref bean="serializeCMSAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        *************************************
        ***                               ***
        ***   M A I N   P I P E L I N E   ***
        ***                               ***
        *************************************
    -->
    
    <bean id="generate" parent="SimplePipeline"
        p:id="generate">
        <property name="stages">
            <list>
                <!--
                    Acquire metadata for all UK-registered entities.
                -->
                <ref bean="uk_registeredEntities"/>
                
                <!--
                    *******************************************************
                    ***                                                 ***
                    ***   R A W   R E G I S T R A R   E N T I T I E S   ***
                    ***                                                 ***
                    *******************************************************
                    
                    At this point, the collection contains only entities
                    registered by the UK federation registrar.  The minimum
                    changes possible have been performed, so that the statistics
                    report can be as comprehensive as possible.
                -->
                
                <!--
                    Fork new output pipelines for the registrar statistics and for
                    the CMS aggregate.
                -->
                <bean id="rawRegistrarDemux" parent="PipelineDemultiplexerStage"
                    p:id="rawRegistrarDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_statisticsPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="CMSPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>
                
                <!--
                    Remove constructs which we no longer publish to any
                    external registry clients.
                -->
                <ref bean="uk_stripAdminContacts"/>
                <ref bean="removeEmptyExtensions"/>
                
                <!--
                    ***********************************************
                    ***                                         ***
                    ***   R E G I S T R A R   E N T I T I E S   ***
                    ***                                         ***
                    ***********************************************
                    
                    At this point, the collection contains only
                    entities registered by the UK federation registrar.
                -->
                
                <!--
                    Fork a new output pipeline for the export aggregate.
                    
                    The export aggregate only includes UK-registered entities,
                    so the fork needs to occur before any others are introduced.
                    
                    The export aggregate is also intended to reflect the registered
                    metadata as closely as possible, so the fork must happen before
                    too many UK-specific transformations are performed.
                -->
                <bean id="registrarDemux" parent="PipelineDemultiplexerStage"
                    p:id="registrarDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_exportPipeline"/>
                                <constructor-arg ref="uk_exportSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>
                
                <!--
                    Strip out those ukfedlabel extensions that we don't publish.
                    
                    This is performed independently on the export pipeline because
                    selection for that pipeline is based on these same extensions.
                    A better solution would be to extract the ExportOptIn label into
                    an item metadata object, and move this section before the export fork.
                -->
                <ref bean="uk_stripExtensions"/>
                <ref bean="removeEmptyExtensions"/>
                
                <!--
                    ***************************************************
                    ***                                             ***
                    ***   P R O D U C T I O N   M D X   M E R G E   ***
                    ***                                             ***
                    ***************************************************
                    
                    Merge in entities from production metadata exchange sources.
                -->
                
                <bean id="mergeProductionMDXEntities" parent="PipelineMergeStage.deduplicate"
                    p:id="mergeProductionMDXortedEntities">
                    <property name="mergedPipelines">
                        <list>
                            <!-- entries earlier in the list have higher precedence -->
                            <ref bean="uk_int_edugain_importPipeline"/>
                        </list>
                    </property>
                </bean>
                
                <!--
                    *************************************************
                    ***                                           ***
                    ***   P R O D U C T I O N   E N T I T I E S   ***
                    ***                                           ***
                    *************************************************
                    
                    At this point, the collection contains entities
                    registered by the UK federation registrar plus
                    entities received through production-status MDX
                    relationships.
                -->

                <!--
                    Fork into new pipelines for the production, fallback and WAYF aggregates.
                -->
                <bean id="productionDemux" parent="PipelineDemultiplexerStage"
                    p:id="productionDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_productionPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_fallbackPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_wayfPipeline"/>
                                <constructor-arg ref="uk_wayfSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>

                <!--
                    ***********************************************************
                    ***                                                     ***
                    ***   P R E - P R O D U C T I O N   M D X   M E R G E   ***
                    ***                                                     ***
                    ***********************************************************
                    
                    Merge in entities from pre-production metadata exchange sources.
                -->

                <bean id="mergePreproductionMDXEntities" parent="PipelineMergeStage.deduplicate"
                    p:id="mergePreproductionMDXEntities">
                    <property name="mergedPipelines">
                        <list>
                            <!-- entries earlier in the list have higher precedence -->
                            <ref bean="uk_us_incommon_importPipeline"/>
                        </list>
                    </property>
                </bean>
                
                <!--
                    *********************************************************
                    ***                                                   ***
                    ***   P R E - P R O D U C T I O N   E N T I T I E S   ***
                    ***                                                   ***
                    *********************************************************
                    
                    At this point, the collection contains entities
                    registered by the UK federation registrar plus
                    entities received through both production-status
                    and pre-production-status MDX relationships.
                -->
                
                <!--
                    Fork into new pipelines for additional aggregates.
                -->
                <bean id="preProductionDemux" parent="PipelineDemultiplexerStage"
                    p:id="preProductionDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="CDSAllPipeline"/>
                                <constructor-arg ref="CDSAllSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>
                
                <!-- pipeline continues to generate test aggregate -->
                <ref bean="uk_testPipeline"/>

            </list>
        </property>
    </bean>

</beans>
