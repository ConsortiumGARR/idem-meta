<?xml version="1.0" encoding="UTF-8"?>
<!--
    Verb to generate all UK aggregates.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        Import commonly used beans.
    -->
    <import resource="../common-beans.xml"/>
    
    <!--
        Import channel-specific beans.
    -->
    <import resource="beans.xml"/>
    
    <!--
        Import beans from other channels.
    -->
    <import resource="../ie_edugate/beans.xml"/>
    <import resource="../us_incommon/beans.xml"/>


    <!--
        *****************************
        ***                       ***
        ***   U T I L I T I E S   ***
        ***                       ***
        *****************************
    -->
    
    <!--
        stripEntityScopes
    
        Remove entity-level Scope elements, leaving only the ones associated
        with role descriptors.    
    -->
    <bean id="stripEntityScopes" parent="xslt_parent"
        p:id="stripEntityScopes">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/entity_scopes.xsl"/>
            </bean>
        </property>
    </bean>
    
    
    <!--
        ***********************
        ***                 ***
        ***   F I X U P S   ***
        ***                 ***
        ***********************
    -->
    
    <!--
        Published UK federation metadata for consumption by federation
        members has a couple of restrictions arising from known bugs in
        early software.  We address these by "fixups" which transform the
        metadata into a form which doesn't trigger the bug, and verify that
        each constraints is met before publication.
        
        We apply fixups "late" in each publication pipeline, so that
        the metadata is only transformed if required for a particular
        output document.  Our export aggregate, for example, does
        not have any of the fixups applied.
        
        In the long term, we'd hope to retire these fixups entirely as the
        software they to cater for is retired.
    -->
    
    <!--
        fixup_EncryptionMethod
        
        Remove all md:EncryptionMethod elements.
        
        This is normally done to avoid triggering a problem in OpenSAML-C 2.0.
        
        See https://wiki.shibboleth.net/confluence/display/SHIB2/MetadataCorrectness#MetadataCorrectness-Version20
    -->
    <bean id="fixup_EncryptionMethod" parent="stripElement_parent"
        p:id="fixup_EncryptionMethod"
        p:elementName="EncryptionMethod"
        p:elementNamespace="urn:oasis:names:tc:SAML:2.0:metadata"/>
    
    <!--
        fixup_keyuse
        
        Patch any @use-less KeyName descriptors in IdP roles
        for the benefit of Shib SPs pre-1.3.1.
    -->
    <bean id="fixup_keyuse" parent="xslt_parent"
        p:id="fixup_keyuse">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/fixup_keyuse.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        performOtherFixups
        
        Perform all fixup actions which are required for *every* output document.
        
        Fixup actions which are only required in specific output pipelines need to
        appear there individually.
    -->
    <bean id="performOtherFixups" parent="composite_parent"
        p:id="performOtherFixups">
        <property name="composedStages">
            <list>
                <ref bean="fixup_keyuse"/>
            </list>
        </property>
    </bean>
    
    <!--
        check_fixup_encmethod
    -->
    <bean id="check_fixup_encmethod" parent="check_xslt_parent"
        p:id="check_fixup_encmethod">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/check_fixup_encmethod.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        check_fixup_keyuse
    -->
    <bean id="check_fixup_keyuse" parent="check_xslt_parent"
        p:id="check_fixup_keyuse">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/check_fixup_keyuse.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        checkPublishable
        
        Check an aggregate metadata document for publishability.  This is applied during
        all UK publication flows prior to any signature step.  It is not applied to
        export flows, for which we desire the closest possible correspondence to
        the registered metadata.
    -->
    <bean id="checkPublishable" parent="composite_parent"
        p:id="checkPublishable">
        <property name="composedStages">
            <list>
                <ref bean="checkSchemas"/>
                <ref bean="check_aggregate"/>
                <ref bean="check_filtered"/>
                <ref bean="check_fixup_keyuse"/>
            </list>
        </property>
    </bean>
    
    <!--
        *******************************************
        ***                                     ***
        ***   I M P O R T   P I P E L I N E S   ***
        ***                                     ***
        *******************************************
    -->
    
    <bean id="uk_ie_edugate_importPipeline" parent="pipeline_parent"
        p:id="uk_ie_edugate_importPipeline">
        <property name="stages">
            <list>
                <ref bean="ie_edugate_exportedEntities"/>
                <ref bean="uk_fix_mailto"/>
                <ref bean="uk_hide_idps"/>
            </list>
        </property>
    </bean>
    
    <bean id="uk_us_incommon_importPipeline" parent="pipeline_parent"
        p:id="uk_us_incommon_importPipeline">
        <property name="stages">
            <list>
                <ref bean="us_incommon_exportedEntities"/>
                <ref bean="uk_fix_mailto"/>
                <ref bean="uk_hide_idps"/>
            </list>
        </property>
    </bean>
    
    
    <!--
        ***********************************************************************
        ***                                                                 ***
        ***   H I E R A R C H I C A L   A G G R E G A T E   B U I L D E R   ***
        ***                                                                 ***
        ***********************************************************************
    -->
    
    
    <!--
        uk_memberEntitySelector
        
        Selection strategy which is true for entities owned by UK federation
        members.
    -->
    <bean id="uk_memberEntitySelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[md:Extensions/ukfedlabel:UKFederationMember]"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <!--
        Assemble a nested EntitiesDescriptor structure with the
        UK federation entities inside an inner element.
    -->
    <bean id="uk_assembleHierarchicalAggregate" parent="composite_parent"
        p:id="uk_assembleHierarchicalAggregate">
        <property name="composedStages">
            <list>
                <!--
                    Step 1: put all UK entities inside a UK-named EntitiesDescriptor
                -->
                <bean id="uk_buildNestedEntitiesDescriptor" parent="stage_parent"
                    class="net.shibboleth.metadata.pipeline.SplitMergeStage"
                    p:id="uk_buildNestedEntitiesDescriptor">
                    <property name="selectionStrategy">
                        <ref bean="uk_memberEntitySelector"/>
                    </property>
                    <property name="selectedItemPipeline">
                        <bean name="uk_assemblePipeline" parent="pipeline_parent"
                            p:id="uk_assemblePipeline">
                            <property name="stages">
                                <list>
                                    <ref bean="uk_assemble"/>
                                </list>
                            </property>
                        </bean>
                    </property>
                </bean>
                
                <!--
                    Step 2: put that EntitiesDescriptor plus all remaining entities inside an
                    anonymous outer EntitiesDescriptor.
                -->
                <ref bean="uk_assembleUnnamed"/>
            </list>
        </property>
    </bean>


    <!--
        ***************************************************
        ***                                             ***
        ***   P R O D U C T I O N   A G G R E G A T E   ***
        ***                                             ***
        ***************************************************
    -->
    
    <bean id="uk_finaliseProduction" parent="xslt_parent"
        p:id="uk_finaliseProduction">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/final_tweak.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>

    <bean id="serializeUnsignedProductionAggregate" parent="serialize_parent"
        p:id="serializeUnsignedProductionAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-metadata-unsigned.xml"/>
            </bean>
        </property>
    </bean>

    <bean id="uk_productionPipeline" parent="pipeline_parent"
        p:id="uk_productionPipeline">
        <property name="stages">
            <list>
                <ref bean="uk_assemble"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseProduction"/>
                <ref bean="uk_normaliseNamespaces"/>
                
                <!-- production aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedProductionAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***************************************
        ***                                 ***
        ***   W A Y F   A G G R E G A T E   ***
        ***                                 ***
        ***************************************
    -->
    
    <bean id="uk_wayfSelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[not(md:Extensions/wayf:HideFromWAYF)]"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <bean id="serializeUnsignedWayfAggregate" parent="serialize_parent"
        p:id="serializeUnsignedWayfAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-wayf-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_wayfPipeline" parent="pipeline_parent"
        p:id="uk_wayfPipeline">
        <property name="stages">
            <list>
                <ref bean="uk_assemble"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_finaliseProduction"/>
                <ref bean="uk_normaliseNamespaces"/>

                <!-- WAYF aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>

                <ref bean="serializeUnsignedWayfAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***********************************************
        ***                                         ***
        ***   F A L L B A C K   A G G R E G A T E   ***
        ***                                         ***
        ***********************************************
    -->
    
    <bean id="uk_finaliseFallback" parent="xslt_parent"
        p:id="uk_finaliseFallback">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/final_tweak.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Feature fallback metadata; not for production use"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseFallback" parent="xslt_parent"
        p:id="uk_normaliseFallback">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_back.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="serializeUnsignedFallbackAggregate" parent="serialize_parent"
        p:id="serializeUnsignedFallbackAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-back-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_fallbackPipeline" parent="pipeline_parent"
        p:id="uk_fallbackPipeline">
        <property name="stages">
            <list>
                <ref bean="uk_assemble"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="removeEmptyExtensions"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseFallback"/>
                <ref bean="uk_normaliseFallback"/>
                
                <!-- fallback aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedFallbackAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        ***************************************
        ***                                 ***
        ***   T E S T   A G G R E G A T E   ***
        ***                                 ***
        ***************************************
    -->
    
    <bean id="uk_finaliseTest" parent="xslt_parent"
        p:id="uk_finaliseTest">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/final_tweak.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Feature test metadata; not for production use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseTest" parent="xslt_parent"
        p:id="uk_normaliseTest">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_test.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="serializeUnsignedTestAggregate" parent="serialize_parent"
        p:id="serializeUnsignedTestAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-test-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_testPipeline" parent="composite_parent"
        p:id="uk_testPipeline">
        <property name="composedStages">
            <list>
                <ref bean="uk_assembleHierarchicalAggregate"/>
                <ref bean="fixup_EncryptionMethod"/>
                <ref bean="performOtherFixups"/>
                <ref bean="uk_addTrustRoots"/>
                <ref bean="uk_finaliseTest"/>
                <ref bean="uk_normaliseTest"/>
                
                <!-- test aggregate MUST pass publishability test -->
                <ref bean="checkPublishable"/>
                <ref bean="check_fixup_encmethod"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedTestAggregate"/>
            </list>
        </property>
    </bean>

    <!--
        *******************************************
        ***                                     ***
        ***   E X P O R T   A G G R E G A T E   ***
        ***                                     ***
        *******************************************
    -->
    
    <bean id="uk_finaliseExport" parent="xslt_parent"
        p:id="uk_finaliseExport">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/final_tweak.xsl"/>
            </bean>
        </property>
        <property name="transformParameters">
            <map>
                <entry key="extraText" value="Prototype export metadata; not for production use"/>
                <entry key="publisher" value-ref="uk_federation_uri"/>
            </map>
        </property>
    </bean>
    
    <bean id="uk_normaliseExport" parent="xslt_parent"
        p:id="uk_normaliseExport">
        <property name="xslResource">
            <bean parent="file_parent">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/uk/ns_norm_export.xsl"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_exportSelector" class="net.shibboleth.metadata.dom.XPathItemSelectionStrategy">
        <constructor-arg value="/md:EntityDescriptor[md:Extensions/ukfedlabel:ExportOptIn]"/>
        <constructor-arg ref="commonNamespaces"/>
    </bean>
    
    <bean id="serializeUnsignedExportAggregate" parent="serialize_parent"
        p:id="serializeUnsignedExportAggregate">
        <property name="outputFile">
            <bean class="java.io.File">
                <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-export-unsigned.xml"/>
            </bean>
        </property>
    </bean>
    
    <bean id="uk_exportPipeline" parent="pipeline_parent"
        p:id="uk_exportPipeline">
        <property name="stages">
            <list>
                <ref bean="stripUkfedlabelNamespace"/>
                <ref bean="stripWayfNamespace"/>
                <ref bean="stripKeyNames"/>
                <ref bean="uk_assemble"/>
                <ref bean="stripEntityScopes"/>
                <ref bean="removeEmptyExtensions"/>
                <ref bean="uk_finaliseExport"/>
                <ref bean="uk_normaliseExport"/>
                
                <!-- schema validity check MUST pass -->
                <ref bean="checkSchemas"/>
                <ref bean="errorTerminatingFilter"/>
                
                <ref bean="serializeUnsignedExportAggregate"/>
            </list>
        </property>
    </bean>
    
    <!--
        *************************************
        ***                               ***
        ***   M A I N   P I P E L I N E   ***
        ***                               ***
        *************************************
    -->
    
    <bean id="generate" parent="pipeline_parent"
        p:id="generate">
        <property name="stages">
            <list>
                <!--
                    Acquire metadata for all UK-registered entities.
                -->
                <ref bean="uk_registeredEntities"/>
                
                <!--
                    Remove all "administrative" contacts.
                -->
                <ref bean="uk_stripAdminContacts"/>
                
                <!--
                    ***********************************************
                    ***                                         ***
                    ***   R E G I S T R A R   E N T I T I E S   ***
                    ***                                         ***
                    ***********************************************
                    
                    At this point, the collection contains only
                    entities registered by the UK federation registrar.
                -->
                
                <!--
                    Fork into new pipelines for the export aggregate and for
                    the registrar statistics.
                    
                    The export aggregate only includes UK-registered entities,
                    so the fork needs to occur before any others are introduced.
                    
                    The export aggregate is also intended to reflect the registered
                    metadata as closely as possible, so the fork must happen before
                    too many UK-specific transformations are performed.
                -->
                <bean id="registrarDemux" parent="stage_parent"
                    class="net.shibboleth.metadata.pipeline.PipelineDemultiplexerStage"
                    p:id="registrarDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_exportPipeline"/>
                                <constructor-arg ref="uk_exportSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_statisticsPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>
                
                <!--
                    Strip out those ukfedlabel extensions that we don't publish.
                    
                    This is performed independently on the export pipeline because
                    selection for that pipeline is based on these same extensions.
                -->
                <ref bean="uk_stripExtensions"/>
                <ref bean="removeEmptyExtensions"/>
                
                <!--
                    ***************************************************
                    ***                                             ***
                    ***   P R O D U C T I O N   M D X   M E R G E   ***
                    ***                                             ***
                    ***************************************************
                    
                    Merge in entities from production metadata exchange sources.
                -->
                
                <bean id="mergeProductionMDXEntities" parent="merge_parent"
                    p:id="mergeProductionMDXortedEntities">
                    <property name="mergedPipelines">
                        <list>
                            <!-- entries earlier in the list have higher precedence -->
                        </list>
                    </property>
                </bean>
                
                <!--
                    *************************************************
                    ***                                           ***
                    ***   P R O D U C T I O N   E N T I T I E S   ***
                    ***                                           ***
                    *************************************************
                    
                    At this point, the collection contains entities
                    registered by the UK federation registrar plus
                    entities received through production-status MDX
                    relationships.
                -->

                <!--
                    Fork into new pipelines for the production, fallback and WAYF aggregates.
                -->
                <bean id="productionDemux" parent="stage_parent"
                    class="net.shibboleth.metadata.pipeline.PipelineDemultiplexerStage"
                    p:id="productionDemux">
                    <property name="pipelineAndSelectionStrategies">
                        <list>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_productionPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_fallbackPipeline"/>
                                <constructor-arg ref="everythingSelector"/>
                            </bean>
                            <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                                <constructor-arg ref="uk_wayfPipeline"/>
                                <constructor-arg ref="uk_wayfSelector"/>
                            </bean>
                        </list>
                    </property>
                    <property name="waitingForPipelines" value="true"/>
                </bean>

                <!--
                    ***********************************************************
                    ***                                                     ***
                    ***   P R E - P R O D U C T I O N   M D X   M E R G E   ***
                    ***                                                     ***
                    ***********************************************************
                    
                    Merge in entities from pre-production metadata exchange sources.
                -->

                <bean id="mergePreproductionMDXEntities" parent="merge_parent"
                    p:id="mergePreproductionMDXEntities">
                    <property name="mergedPipelines">
                        <list>
                            <!-- entries earlier in the list have higher precedence -->
                            <ref bean="uk_ie_edugate_importPipeline"/>
                            <ref bean="uk_us_incommon_importPipeline"/>
                        </list>
                    </property>
                </bean>
                
                <!--
                    *********************************************************
                    ***                                                   ***
                    ***   P R E - P R O D U C T I O N   E N T I T I E S   ***
                    ***                                                   ***
                    *********************************************************
                    
                    At this point, the collection contains entities
                    registered by the UK federation registrar plus
                    entities received through both production-status
                    and pre-production-status MDX relationships.
                -->
                
                <!-- pipeline continues to generate test aggregate -->
                <ref bean="uk_testPipeline"/>

            </list>
        </property>
    </bean>

</beans>
