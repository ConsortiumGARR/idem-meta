<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common bean definitions.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--
        Import beans related to metadata validation.
    -->
    <import resource="validation-beans.xml"/>
    
    <!--
        parserPool
        
        A pre-configured parser pool for use by source stages.
    -->
    <bean id="parserPool" class="org.opensaml.util.xml.BasicParserPool"
        init-method="initialize" lazy-init="true">
        <property name="ignoreComments" value="false"/>
        <property name="ignoreElementContentWhitespace" value="false"/>
    </bean>
    
    <!--
        commonNamespaces
        
        A NamespaceContext that assigns the usual prefix for each of the commonly used XML namespaces.
        This is used in the evaluation of XPath expressions.
    -->
    <bean id="commonNamespaces" class="net.shibboleth.metadata.dom.SimpleNamespaceContext">
        <constructor-arg>
            <util:map map-class="java.util.HashMap">
                <entry key="alg"        value="urn:oasis:names:tc:SAML:metadata:algsupport"/>
                <entry key="ds"         value="http://www.w3.org/2000/09/xmldsig#"/>
                <entry key="elab"       value="http://eduserv.org.uk/labels"/>
                <entry key="idpdisc"    value="urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol"/>
                <entry key="init"       value="urn:oasis:names:tc:SAML:profiles:SSO:request-init"/>
                <entry key="md"         value="urn:oasis:names:tc:SAML:2.0:metadata"/>
                <entry key="mdattr"     value="urn:oasis:names:tc:SAML:metadata:attribute"/>
                <entry key="mdrpi"      value="urn:oasis:names:tc:SAML:metadata:rpi"/>
                <entry key="mdui"       value="urn:oasis:names:tc:SAML:metadata:ui"/>
                <entry key="saml"       value="urn:oasis:names:tc:SAML:2.0:assertion"/>
                <entry key="samlp"      value="urn:oasis:names:tc:SAML:2.0:protocol"/>
                <entry key="shibmd"     value="urn:mace:shibboleth:metadata:1.0"/>
                <entry key="ukfedlabel" value="http://ukfederation.org.uk/2006/11/label"/>
                <entry key="wayf"       value="http://sdss.ac.uk/2006/06/WAYF"/>
                <entry key="xenc"       value="http://www.w3.org/2001/04/xmlenc#"/>
                <entry key="xs"         value="http://www.w3.org/2001/XMLSchema"/>
                <entry key="xsi"        value="http://www.w3.org/2001/XMLSchema-instance"/>
                <entry key="xsl"        value="http://www.w3.org/1999/XSL/Transform"/>
            </util:map>
        </constructor-arg>
    </bean>

    <!--
        schemaResources
        
        A list of all schema documents that we make common use of.
    -->
    <util:list id="schemaResources">
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/saml-metadata-rpi-v1.0-wd06.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/saml-schema-assertion-2.0.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/saml-schema-metadata-2.0.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/shibboleth-metadata-1.0.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/sstc-metadata-attr.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/sstc-request-initiation.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/sstc-saml-idp-discovery.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/sstc-saml-metadata-algsupport-v1.0.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/sstc-saml-metadata-ui-v1.0.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/uk-fed-label.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/ukfederation-members.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/xenc-schema.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/xml.xsd"/>
        </bean>
        <bean class="org.opensaml.util.resource.FilesystemResource">
            <constructor-arg value="#{ systemProperties['basedir'] }/xml/xmldsig-core-schema.xsd"/>
        </bean>
    </util:list>
    
    <!--
        checkSchemas
        
        A pipeline stage that checks against all the common schemas, as above.
    -->
    <bean id="checkSchemas" class="net.shibboleth.metadata.dom.XMLSchemaValidationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="checkSchemas"/>
        <property name="schemaResources" ref="schemaResources"/>
    </bean>
    
    <!--
        errorAnnouncingFilter
        
        A pipeline stage that checks for any errors, and then announces
        and filters any encountered.
    -->
    <bean id="errorAnnouncingFilter" class="uk.org.ukfederation.mda.ErrorAnnouncingFilteringStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="errorAnnouncingFilter"/>
    </bean>
    
    <!--
        errorTerminatingFilter
        
        A pipeline stage that checks for any errors, and then announces
        and filters any encountered.
    -->
    <bean id="errorTerminatingFilter" class="uk.org.ukfederation.mda.ErrorAnnouncingFilteringStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="errorTerminatingFilter"/>
        <property name="terminating" value="true"/>
    </bean>
    
    <!--
        cleanImport
        
        A pipeline stage that can be used in an import pipeline to clean up the metadata
        presented, for example by removing redundant attributes or elements which only have
        meaning when added by the UK federation registrar.
    -->
    <bean id="cleanImport" class="net.shibboleth.metadata.dom.XSLTransformationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="cleanImport"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/mdx/clean-import.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        Basic EntitiesDescriptor disassembler pipeline stage.
    -->
    <bean id="disassemble" class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorDisassemblerStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="disassemble"/>
    </bean>
    
    <!--
        Populate ItemId values from entities.
    -->
    <bean id="populateItemIds" class="net.shibboleth.metadata.dom.saml.EntityDescriptorItemIdPopulationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="populateItemIds"/>
    </bean>
    
    <!--
        stripKeyNames
        
        Remove all ds:KeyName elements.
    -->
    <bean id="stripKeyNames" class="uk.org.ukfederation.mda.ElementStrippingStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="stripKeyNames"/>
        <property name="elementName" value="KeyName"/>
        <property name="elementNamespace" value="http://www.w3.org/2000/09/xmldsig#"/>
    </bean>
    
    <!--
        Remove any empty Extensions elements.
    -->
    <bean id="removeEmptyExtensions" class="uk.org.ukfederation.mda.RemoveEmptyExtensionsStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="removeEmptyExtensions"/>
    </bean>
    
    <!--
        standardImportActions
        
        Standard actions performed on any metadata import channel.  Assumes that the
        collection has been acquired, had its signature validated, and disassembled into
        individual entities.
    -->
    <bean id="standardImportActions" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="standardImportActions"/>
        <property name="composedStages">
            <list>
                <ref bean="populateItemIds"/>
                <ref bean="cleanImport"/>
                <ref bean="removeEmptyExtensions"/>
                <ref bean="checkSchemas"/>
                <ref bean="CHECK_imported"/>
                <ref bean="errorAnnouncingFilter"/>
            </list>
        </property>
    </bean>
    
    <!--
        Basic EntitiesDescriptor assembler pipeline stage.
    -->
    <bean id="assemble" class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="assemble"/>
    </bean>
    
    <!--
        normaliseNamespaces
        
        A pipeline stage that can be used before serialisation to normalise the namespaces
        used in an XML document.
    -->
    <bean id="normaliseNamespaces" class="net.shibboleth.metadata.dom.XSLTransformationStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="normaliseNamespaces"/>
        <property name="xslResource">
            <bean class="org.opensaml.util.resource.FilesystemResource">
                <constructor-arg value="#{ systemProperties['basedir'] }/build/ns_norm.xsl"/>
            </bean>
        </property>
    </bean>
    
    <!--
        standardImportTail
        
        Standard actions performed at the end of any metadata import channel.  As imports
        are currently ending up in files, build an EntitiesDescriptor and normalise the
        namespaces in the document ready for serialisation.
    -->
    <bean id="standardImportTail" class="net.shibboleth.metadata.pipeline.CompositeStage"
        init-method="initialize" lazy-init="true">
        <property name="id" value="standardImportTail"/>
        <property name="composedStages">
            <list>
                <ref bean="assemble"/>
                <ref bean="normaliseNamespaces"/>
            </list>
        </property>
    </bean>
    
    <!--
        everythingSelector
        
        An item selection strategy that selects all items.
    -->
    <bean id="everythingSelector" class="net.shibboleth.metadata.AlwaysItemSelectionStrategy"/>
    
    <!--
        Standard serializer.
    -->
    <bean id="serializer" class="net.shibboleth.metadata.dom.DomElementSerializer"/>
    
</beans>
