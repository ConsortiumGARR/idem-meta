<?xml version="1.0" encoding="UTF-8"?>

<!--
	Federation metadata signing process for the SDSS federation.
	
	* "ant pull" fetches the master file from the remote site, and
	  requires the remote site password.
	  
	* "ant process" generates the other files from the master file, and
	  signs as appropriate.  Requires the keystore password.
	  
	* "ant push" sends all files to the remote site, and requires
	  the remote site password.
	  
	The files involved are:
	
	[0]		master [+entity fragment files]
	[1]			sdss-metadata-unsigned
	[2]				== sdss-sites-13-unsigned
	[3]				sdss-metadata
	[4]					== sdss-sites-13
	[5]				sdss-sites-12-unsigned
	[6]					== sdss-sites-unsigned
	[7]					sdss-sites-12
	[8]						== sdss-sites
	[11]			sdss-trust-12-unsigned
	[12]				== sdss-trust-unsigned
	[13]				sdss-trust-12
	[14]					== sdss-trust
	[17]			sdss-wayf-unsigned.xml
	[18]				sdss-wayf.xml
 
	In the above list, indentation implies the creation hierarchy and "=="
	implies creation by copying.  The numbers in brackets are duplicated
	in the script where the file in question is created.  Some numbers are
	missing because some old format files are no longer being generated.
-->
<project default="process">
    
	<!--
		Accessing the remote system.
	-->
	<property name="remote.host" value="bodach.ucs.ed.ac.uk"/>
	<property name="remote.user" value="sdssweb"/>
	<property name="remote.dir" value="dev/fed"/>
	<!-- <property name="remote.user" value="shibb"/> -->
	<!-- <property name="remote.dir" value="shibb12/apache/sites/sdss/fed"/> -->
	<property name="remote.loc" value="${remote.user}@${remote.host}:${remote.dir}"/>

	<!--
		Local specialised directories.
	-->
	<property name="build.dir" value="${basedir}/build"/>
	<property name="endorsed.dir" value="endorsed"/>
	<property name="entities.dir" value="entities"/>
	<property name="lib.dir" value="lib"/>
	<property name="templates.dir" value="templates"/>
	<property name="xalan.dir" value="xalan-j_2_6_0"/>
	<property name="xml.dir" value="xml"/>

	<!--
		The entities file contains the individual entity fragment files
		concatenated together and enclosed in an <Entities> element.
	-->
	<property name="entities.file.dir" value="${xml.dir}"/>
	<property name="entities.file.name" value="entities.xml"/>
	<property name="entities.file" value="${entities.file.dir}/${entities.file.name}"/>

	<!--
		The master file contains the trust fabric, and optionally some entities
		which have not yet been broken out into separate fragment files.
	-->
	<property name="master.file.dir" value="${xml.dir}"/>
	<property name="master.file.name" value="master.xml"/>
	<property name="master.file" value="${master.file.dir}/${master.file.name}"/>
	
	<!--
		Files within the XML directory.
	-->
	<property name="sdss.master.file" value="sdss-metadata-unsigned.xml"/>
	
	<property name="known.hosts" value="${build.dir}/known_hosts"/>

	<!--
		Standard processing: generate, sign, then verify.
	-->
	<target name="process" depends="get.keystore.pass, generate, sign, verify">
		<echo>Processing complete.</echo>
	</target>

	<!--
		Acquire the remote password.
	-->
	<target name="get.remote.pass" unless="remote.pass">
		<input addproperty="remote.pass">
			Please enter the password for ${remote.user} on ${remote.host}:
		</input>
	</target>

	<!--
		Pull the master file from the remote machine.  We don't normally do this, as
		the usual procedure is to overwrite the master file from an e-mail message.
		
		*** TODO *** now, we also need to pull the individual entity fragment files.
	-->
	<target name="pull" depends="get.remote.pass">
		<!-- [0] -->
		<scp failonerror="true" password="${remote.pass}"
			remoteFile="${remote.loc}/${master.file}"
			todir="${xml.dir}"
			knownhosts="${known.hosts}"
		/>
	</target>
	
	<!--
		Push all generated XML files, and entity fragment files, to the remote machine.
	-->
	<target name="push" depends="get.remote.pass">
		<scp failonerror="true" password="${remote.pass}" remoteTodir="${remote.loc}"
				knownhosts="${known.hosts}">
			<fileset dir="${xml.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</scp>
		<scp failonerror="true" password="${remote.pass}" remoteTodir="${remote.loc}/entities"
				knownhosts="${known.hosts}">
			<fileset dir="${entities.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</scp>
	</target>

	<!--
		Generate unsigned metadata.
	-->
	<target name="generate" depends="gen.master.sdss, gen.shibb.1.3, gen.shibb.1.2, gen.wayf">
		<echo>Generated unsigned metadata.</echo>
	</target>

	<!--
		Macro to run the Xalan XSLT engine, taking files from pre-defined
		locations.
	-->
	<macrodef name="XALAN">
		<attribute name="i"/>
		<attribute name="o"/>
		<attribute name="x"/>
		<sequential>
			<java fork="true" failonerror="true" classname="org.apache.xalan.xslt.Process">
				<classpath location="${xalan.dir}/bin/xalan.jar"/>
				<arg value="-IN"/>
				<arg value="${xml.dir}/@{i}"/>
				<arg value="-OUT"/>
				<arg value="${xml.dir}/@{o}"/>
				<arg value="-XSL"/>
				<arg value="${build.dir}/@{x}"/>
			</java>
		</sequential>
	</macrodef>

	<!--
		gen.entities
		
		Concatenates the (potentially many) entity fragment files together into a single file
		wrapping the entities in an <Entities> element.  This can then be dragged in by the document
		function in XSLT.
	-->
	<target name="gen.entities">
		<echo>Composing entity fragment files.</echo>
		<concat destfile="${entities.file}" append="no" force="yes" fixlastline="yes">
			<header filtering="no">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#10;&lt;Entities&gt;&#10;</header>
			<fileset dir="${entities.dir}" includes="uk*.xml"/>
			<footer>&lt;/Entities&gt;&#10;</footer>
			<filterchain>
				<replaceregex pattern="&lt;\?[xX][mM][lL] .*&gt;" />
			</filterchain>
		</concat>
	</target>
	
	<!--
		gen.master.sdss
		
		Generate the master file for the SDSS federation from the ultimate master
		plus the composed entity fragment files.
	-->
	<target name="gen.master.sdss" depends="gen.entities">
		<echo>Generating unsigned SDSS master file.</echo>
		<!-- [1] -->
		<XALAN x="master_sdss.xsl" i="${master.file.name}"
			o="${sdss.master.file}" />
	</target>
	
	<target name="gen.shibb.1.3">
		<echo>Generating unsigned V1.3 metadata.</echo>
		<!-- [2] -->
		<copy overwrite="yes" file="${xml.dir}/${sdss.master.file}"
			tofile="${xml.dir}/sdss-sites-13-unsigned.xml"/>
	</target>

	<target name="gen.shibb.1.2">
		<echo>Generating unsigned V1.2 metadata.</echo>
		<!-- [5] -->
		<XALAN x="v13_to_v12_sites.xsl" i="${sdss.master.file}"
			o="sdss-sites-12-unsigned.xml"/>
		<!-- [6] -->
		<copy overwrite="yes" file="${xml.dir}/sdss-sites-12-unsigned.xml"
			tofile="${xml.dir}/sdss-sites-unsigned.xml"/>
		<!-- [11] -->
		<XALAN x="v13_to_v12_trust.xsl" i="${sdss.master.file}"
			o="sdss-trust-12-unsigned.xml"/>
		<!-- [12] -->
		<copy overwrite="yes" file="${xml.dir}/sdss-trust-12-unsigned.xml"
			tofile="${xml.dir}/sdss-trust-unsigned.xml"/>
	</target>
	
	<target name="gen.wayf">
		<echo>Generating unsigned WAYF metadata.</echo>
		<!-- [17] -->
		<XALAN x="master_to_wayf.xsl" i="sdss-metadata-unsigned.xml" o="sdss-wayf-unsigned.xml"/>
	</target>
	
	<!--
		Acquire the keystore password.
	-->
	<target name="get.keystore.pass" unless="keystore.pass">
		<input addproperty="keystore.pass">
			Please enter the password for the SDSS keystore:
		</input>
	</target>

	<!--
		Macro to run the metadatatool application with appropriate defaults.
	-->
	<macrodef name="MDT">
		<attribute name="i"/>
		<attribute name="o"/>
		<element name="args" optional="yes"/>
		<sequential>
			<java classname="edu.internet2.middleware.shibboleth.utils.MetadataTool"
				fork="true" failonerror="true">
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="**/*.jar"/>
					</fileset>
				</classpath>
				<jvmarg value="-Djava.endorsed.dirs=endorsed"/>
				<!--
				<jvmarg value="-Dlog4j.configuration=log4j.properties"/>
				-->
				<args/>
				<arg value="--keystore"/>
				<arg value="${build.dir}/sdss.jks"/>
				<arg value="--alias"/>
				<arg value="sdss"/>
				<arg value="--in"/>
				<arg value="${xml.dir}/@{i}"/>
				<arg value="--out"/>
				<arg value="${xml.dir}/@{o}"/>
			</java>
		</sequential>
	</macrodef>
	
	<macrodef name="SIGN">
		<attribute name="i"/>
		<attribute name="o"/>
		<sequential>
			<MDT i="@{i}" o="@{o}">
				<args>
					<arg value="--sign"/>
					<arg value="--password"/>
					<arg value="${keystore.pass}"/>
				</args>
			</MDT>
		</sequential>
	</macrodef>
	
	<macrodef name="VFY">
		<attribute name="i"/>
		<sequential>
			<MDT i="@{i}" o="temp.xml"/>
			<touch file="${xml.dir}/temp.xml"/>
			<delete file="${xml.dir}/temp.xml" quiet="true"/>
		</sequential>
	</macrodef>
		
	<!--
		Sign the various metadata files.
	-->
	<target name="sign" depends="sign.shibb.1.3, sign.shibb.1.2, sign.wayf">
		<echo>Generated signed metadata.</echo>
	</target>
	
	<target name="sign.shibb.1.3">
		<echo>Signing Shibboleth 1.3 metadata.</echo>
		<!-- [3] -->
		<SIGN i="${sdss.master.file}" o="sdss-metadata.xml"/>
		<!-- [4] -->
		<copy overwrite="yes" file="${xml.dir}/sdss-metadata.xml"
			tofile="${xml.dir}/sdss-sites-13.xml"/>
	</target>

	<target name="sign.shibb.1.2">
		<echo>Signing Shibboleth 1.2 metadata.</echo>
		<!-- [7] -->
		<SIGN i="sdss-sites-12-unsigned.xml" o="sdss-sites-12.xml"/>
		<!-- [8] -->
		<copy overwrite="yes" file="${xml.dir}/sdss-sites-12.xml"
			tofile="${xml.dir}/sdss-sites.xml"/>
		<!-- [13] -->
		<SIGN i="sdss-trust-12-unsigned.xml" o="sdss-trust-12.xml"/>
		<!-- [14] -->
		<copy overwrite="yes" file="${xml.dir}/sdss-trust-12.xml"
			tofile="${xml.dir}/sdss-trust.xml"/>
	</target>

	<target name="sign.wayf">
		<echo>Signing WAYF metadata.</echo>
		<!-- [18] -->
		<SIGN i="sdss-wayf-unsigned.xml" o="sdss-wayf.xml"/>
	</target>
	
	<!--
		Verify the signed metadata files.
	-->
	<target name="verify" depends="verify.shibb.1.3, verify.shibb.1.2, verify.wayf">
		<echo>Verified signed metadata.</echo>
	</target>

	<target name="verify.shibb.1.3">
		<echo>Verifying signed Shibboleth 1.3 metadata.</echo>
		<VFY i="sdss-metadata.xml"/>
		<VFY i="sdss-sites-13.xml"/>
	</target>
	
	<target name="verify.shibb.1.2">
		<echo>Verifying signed Shibboleth 1.2 metadata.</echo>
		<VFY i="sdss-sites-12.xml"/>
		<VFY i="sdss-trust-12.xml"/>
		<VFY i="sdss-sites.xml"/>
		<VFY i="sdss-trust.xml"/>
	</target>
	
	<target name="verify.wayf">
		<echo>Verifying signed WAYF metadata.</echo>
		<VFY i="sdss-wayf.xml"/>
	</target>
	
</project>