<?xml version="1.0" encoding="UTF-8"?>

<!--
    Federation metadata signing process for the UK federation.

    The following are among the callable targets for this process:

    * "ant process.create-aggregates.test" generates the set of unsigned aggregates, and does nothing else
    * "ant process.mergetomaster.deferred" takes the deferred branch of the data repository, and merges it to master, ready to create aggregates.
    * "ant process.mergetomaster.immediate" takes the immediate branch of the data repository, and merges it to master, ready to create aggregates.
    * "ant process.create-aggregates" generates the set of unsigned aggregates from the other files.
    * "ant process.sign-aggregates.sign" signs each aggregate and verifies the signatures
    * "ant process.collect-mdq" collects the static cache of MDQ responses
    * "ant process.publish" sends all files to the metadata distribution servers.
-->
<project default="echoproperties" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <!--
        *******************************
        ***                         ***
        ***   P R O P E R T I E S   ***
        ***                         ***
        *******************************
    -->

    <!--
        *******************************************
        ***                                     ***
        ***   P R O P E R T Y   S O U R C E S   ***
        ***                                     ***
        *******************************************
    -->

    <!--
        os.family

        Distinguish between the general kind of operating systems
        we could be executing on.

        Values: windows, macosx, linux, other.
    -->
    <condition property="os.family" value="windows">
        <os family="windows"/>
    </condition>
    <condition property="os.family" value="macosx">
        <os family="mac"/>
    </condition>
    <condition property="os.family" value="linux">
        <os family="unix" name="Linux"/>
    </condition>
    <property name="os.family" value="other"/>

    <!--
        env

        Distinguish between different classes of deployment,
        e.g., development vs. production.

        Values: dev, preprod, prod, prod-old

        Defaults to "dev" here, but that can be overridden from the command
        line, a Jenkins job, or in build.properties.
    -->
    <property name="env" value="dev"/>

    <!--
        External property files.

        Pull in properties from external files. Because Ant properties are
        immutable, amy properties declared in this file should be regarded as
        defaults, and will be overridden by any definitions in the following
        locations:

        * on the command line
        * in a Jenkins job definition
        * in any of the external files listed below

        The first location specifying a particular property sets the final value.

        The build.properties file is not source controlled, and should be used
        to override properties for a particular deployment, or to include
        credentials.
    -->
    <property file="build.properties"/>
    <property file="${os.family}.properties"/>
    <property file="${env}.properties"/>
    <property file="default.properties"/>

    <!--
        Local specialised directories.
    -->
    <property name="build.dir" value="${basedir}/build"/>
    <property name="mdx.dir" value="${basedir}/mdx"/>
    <property name="rules.dir" value="${mdx.dir}/_rules"/>
    <property name="utilities.dir" value="${basedir}/utilities"/>
    <property name="mda.credentials.dir" value="/root/idem-credentials"/>
    <property name="output.dir" value="${mdx.dir}/it_idem/md-out"/>

    <!--
        Location of externally supplied tool bundles.
    -->
    <property name="tools.dir" value="tools"/>
    <property name="tools.ant" value="${tools.dir}/ant"/>
    <property name="tools.mda" value="${tools.dir}/aggregator-cli-0.9.1"/>
    <property name="tools.mdnorm" value="${tools.dir}/mdnorm"/>
    <property name="tools.metadatatool" value="${tools.dir}/metadatatool"/>
    <property name="tools.slacktee" value="${tools.dir}/slacktee"/>
    <property name="tools.xmlsectool" value="${tools.dir}/xmlsectool-2.0.0"/>
    <property name="tools.xalan" value="${tools.dir}/xalan"/>

    <!-- Metadata Locations -->
    
    <property name="idem.test.metadata.unsigned" value="idem-test-metadata.xml"/>
    <property name="idem.metadata.unsigned" value="idem-metadata.xml"/>
    <property name="edugain2idem.metadata.unsigned" value="edugain2idem-metadata.xml"/>
    <property name="idem2edugain.metadata.unsigned" value="idem2edugain-metadata.xml"/>

    <property name="idem.test.metadata.signed.sha1" value="idem-test-metadata-sha1.xml"/>
    <property name="idem.test.metadata.signed.sha256" value="idem-test-metadata-sha256.xml"/>

    <property name="idem.metadata.signed.sha1" value="idem-metadata-sha1.xml"/>
    <property name="idem.metadata.signed.sha256" value="idem-metadata-sha256.xml"/>

    <property name="edugain2idem.metadata.signed.sha1" value="edugain2idem-metadata-sha1.xml"/>
    <property name="edugain2idem.metadata.signed.sha256" value="edugain2idem-metadata-sha256.xml"/>

    <property name="idem2edugain.metadata.signed.sha1" value="idem2edugain-metadata-sha1.xml"/>
    <property name="idem2edugain.metadata.signed.sha256" value="idem2edugain-metadata-sha256.xml"/>

    <!--
        Full path to a commonly used temporary file.
    -->
    <property name="temp.xml" value="${build.dir}/temp.xml"/>

    <!--
        Lockfile (the signing process should only be allowed to begin if this is not present)
    -->
    <property name="lockfile" value="${build.dir}/lockfile"/>


    <!--
        *************************************************
        ***                                           ***
        ***   M I S C E L L A N E O U S   S E T U P   ***
        ***                                           ***
        *************************************************
    -->

    <!--
        Additional ANT task definitions.
    -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${tools.ant}/lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!--
        Java memory requirements.

        This is used as the max heap setting for all Java invocations.  This amount will
        be more than some invocations require, but there's no harm in having a higher
        limit for all of them.
    -->
    <property name="java.max.memory" value="1024m"/>

    <!--
        ***************************
        ***                     ***
        ***   M D A   T O O L   ***
        ***                     ***
        ***************************
    -->

    <!--
        Property definitions for the mda tool.

        Any Ant property with a name of the form "mda.*" is passed through
        as a system property to the mda invocation with the "mda." stripped
        off. Thus, a property "mda.foo" will be passed through as a system
        property called "foo".

        The individual properties listed here can be augmented or overridden
        by properties defined in the external properties files, e.g., build.properties.
    -->
    <property name="mda.java.endorsed.dirs" value="${tools.dir}/endorsed"/>
    <property name="mda.mdx.dir" value="${mdx.dir}"/>
    <property name="mda.output.dir" value="${output.dir}"/>

    <!--
        Build a property set of all the properties to be passed through, with
        the "mda." prefix stripped off.
    -->
    <propertyset id="mda.properties">
        <propertyref prefix="mda."/>
        <mapper type="glob" from="mda.*" to="*"/>
    </propertyset>

    <!--
        Macro to run the mda (metadata aggregator CLI) tool.
    -->
    <macrodef name="MDA">
        <!-- Spring pipeline configuration file -->
        <attribute name="config"/>
        <!-- pipeline bean ID -->
        <attribute name="pipeline"/>
        <sequential>
            <java classname="net.shibboleth.metadata.cli.SimpleCommandLine"
                fork="true" failonerror="true" maxmemory="${java.max.memory}">
                <classpath>
                    <!-- Spring "classpath:" imports can be under the MDX directory -->
                    <pathelement path="${mdx.dir}"/>

                    <!-- Include all APIs we may want to use. -->
                    <fileset dir="${tools.mda}/lib">
                        <include name="*.jar"/>
                    </fileset>
                    <fileset dir="${tools.dir}/ukf-mda">
                        <include name="*.jar"/>
                    </fileset>
                    <fileset dir="${tools.dir}/xalan/lib">
                        <include name="sdss-xalan-md-*.jar"/>
                    </fileset>
                </classpath>
                <syspropertyset>
                    <propertyset refid="mda.properties"/>
                </syspropertyset>
                <jvmarg value="-enableassertions"/>
                <arg value="--quiet"/>
                <arg value="@{config}"/>
                <arg value="@{pipeline}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
        *********************************
        ***                           ***
        ***   M D N O R M   T O O L   ***
        ***                           ***
        *********************************
    -->

    <!--
        MDNORM

        Macro to call tool to perform textual normalisation on an XML file
        containing a metadata aggregate.

        Parameter 'i' is the file to be normalised.
    -->
    <macrodef name="MDNORM">
        <attribute name="i"/><!-- input file -->
        <element name="args" optional="yes"/>
        <sequential>
            <java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="uk.org.ukfederation.mdnorm.Normalise">
                <classpath>
                    <fileset dir="${tools.mdnorm}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <args/>
                <arg value="@{i}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
        MDNORM.noblank

        Call MDNORM but discard blank lines from the output.
    -->
    <macrodef name="MDNORM.noblank">
        <attribute name="i"/><!-- input file -->
        <sequential>
            <MDNORM i="@{i}">
                <args>
                    <arg value="--discardBlankLines"/>
                </args>
            </MDNORM>
        </sequential>
    </macrodef>


    <!--
        *****************************************
        ***                                   ***
        ***   X M L S E C T O O L   T O O L   ***
        ***                                   ***
        *****************************************
    -->

    <macrodef name="XMLSECTOOL">
        <attribute name="i"/><!-- input file -->
        <element name="args" optional="yes"/>
        <sequential>
            <java classname="net.shibboleth.tool.xmlsectool.XMLSecTool"
                fork="true" failonerror="true" maxmemory="${java.max.memory}">
                <classpath>
                    <fileset dir="${tools.xmlsectool}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <args/>
                <arg value="--validateSchema"/>
                <arg value="--schemaDirectory"/>
                <arg value="${mdx.dir}/schema"/>
                <arg value="--inFile"/>
                <arg value="@{i}"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="XMLSECTOOL.SIGN.idem">
        <attribute name="i"/><!-- input file -->
        <attribute name="o"/><!-- output file -->
        <attribute name="digest"/><!-- digest function to use -->
        <sequential>
            <!-- delete the temporary file to be sure we don't use old data -->
            <delete file="${temp.xml}" quiet="true" verbose="false"/>

            <echo>Signing @{i} using digest @{digest}.</echo>

            <!-- perform signing operation into temporary file -->
            <XMLSECTOOL i="@{i}">
                <args>
                    <arg value="--sign"/>

                    <!-- set digest to use -->
                    <arg value="--digest"/>
                    <arg value="@{digest}"/>

                    <!--
                        If we have a PKCS#11 configuration specified, include it.
                    -->
                    <arg if:set="sign.idem.pkcs11Config" value="--pkcs11Config"/>
                    <arg if:set="sign.idem.pkcs11Config" value="${sign.idem.pkcs11Config}"/>

                    <!--
                        If we have a keystore specified, include it.
                    -->
                    <arg if:set="sign.idem.keystore" value="--keystore"/>
                    <arg if:set="sign.idem.keystore" value="${sign.idem.keystore}"/>

                    <!--
                        The "key" option can represent either a key file or a key alias.
                        Different properties are used for the two cases (see XSTJ-67).
                    -->
                    <arg if:set="sign.idem.keyFile" value="--key"/>
                    <arg if:set="sign.idem.keyFile" value="${sign.idem.keyFile}"/>
                    <arg if:set="sign.idem.keyAlias" value="--key"/>
                    <arg if:set="sign.idem.keyAlias" value="${sign.idem.keyAlias}"/>

                    <!--
                        Include an X.509 certificate if one is specified.
                    -->
                    <arg if:set="sign.idem.certificate" value="--certificate"/>
                    <arg if:set="sign.idem.certificate" value="${sign.idem.certificate}"/>

                    <arg value="--keyPassword"/>
                    <arg value="${sign.idem.keyPassword}"/>

                    <arg value="--outFile"/>
                    <arg value="@{o}"/>
                    <arg value="--referenceIdAttributeName"/>
                    <arg value="ID"/>
                    <!--
                    <arg value="- -quiet"/>
                    -->
                </args>
            </XMLSECTOOL>

            <!-- Force the output file to use Unix line endings -->
            <fixcrlf file="@{o}" eol="lf" encoding="UTF-8"/>

        </sequential>
    </macrodef>

    <macrodef name="XMLSECTOOL.VFY.idem">
        <attribute name="i"/><!-- input file -->
        <sequential>
            <XMLSECTOOL i="@{i}">
                <args>
                    <arg value="--verifySignature"/>
                    <arg value="--certificate"/>
                    <arg value="${mdx.dir}/it_idem/idem_signer_2019.pem"/>
                    <!--
                    <arg value="- -quiet"/>
                    -->
                </args>
            </XMLSECTOOL>
        </sequential>
    </macrodef>

    <!--
        *******************************
        ***                         ***
        ***   X A L A N   T O O L   ***
        ***                         ***
        *******************************
    -->

    <!--
        Macro to run the Xalan XSLT engine, taking files from arbitrary
        locations.
    -->
    <macrodef name="XALAN">
        <attribute name="i"/>
        <attribute name="o"/>
        <attribute name="x"/>
        <sequential>
            <java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="org.apache.xalan.xslt.Process">
                <classpath>
                    <fileset dir="${tools.xalan}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <jvmarg value="-Djava.endorsed.dirs=${tools.xalan}/endorsed"/>
                <arg value="-IN"/>
                <arg value="@{i}"/>
                <arg value="-OUT"/>
                <arg value="@{o}"/>
                <arg value="-XSL"/>
                <arg value="@{x}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
        Macro to run the Xalan XSLT engine, taking files from arbitrary
        locations.  No output specified, so the result of the transform
        will be sent to standard output.
    -->
    <macrodef name="XALAN.noout">
        <attribute name="i"/>
        <attribute name="x"/>
        <sequential>
            <java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="org.apache.xalan.xslt.Process">
                <classpath>
                    <fileset dir="${tools.xalan}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <jvmarg value="-Djava.endorsed.dirs=${tools.xalan}/endorsed"/>
                <arg value="-IN"/>
                <arg value="@{i}"/>
                <arg value="-XSL"/>
                <arg value="@{x}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
        *******************************************
        ***                                     ***
        ***   M E T A D A T A   S I G N I N G   ***
        ***                                     ***
        *******************************************
    -->

    <!--
        Acquire the signing keystore password.

        Note: this will not result in a prompt if the sign.idem.keyPassword property
        is already defined.
    -->
    <target name="get.sign.idem.keyPassword" unless="sign.idem.keyPassword">
        <input addproperty="sign.idem.keyPassword">
            Please enter the password for the keystores:
        </input>
    </target>

    <!--
        Select tool to sign IDEM federation metadata with.
    -->
    <macrodef name="SIGN.idem">
        <attribute name="i"/>
        <attribute name="o"/>
        <attribute name="digest"/><!-- digest function to use -->
        <sequential>
            <XMLSECTOOL.SIGN.idem i="@{i}" o="@{o}" digest="@{digest}"/>
        </sequential>
    </macrodef>

    <!--
      Signs the unsigned aggregates
    -->
<!--
    <target name="idem-sign-all" depends="get.sign.idem.keyPassword">
        <echo>Signing unsigned aggregates.</echo>

        <echo>Signing IDEM Test metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed}" digest="SHA-256"/>

        <echo>Signing IDEM Production metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed}" digest="SHA-256"/>

        <echo>Signing idem2edugain metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed}" digest="SHA-256"/>

        <echo>Signing edugain2idem metadata.</echo>
        <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed}" digest="SHA-256"/>
    </target>

    <target name="idem-sign-test" depends="get.sign.idem.keyPassword">
        <echo>Signing unsigned aggregates.</echo>

        <echo>Signing IDEM Test metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed}" digest="SHA-256"/>
    </target>

    <target name="idem-sign-production" depends="get.sign.idem.keyPassword">
        <echo>Signing unsigned aggregates.</echo>

        <echo>Signing IDEM Production metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed}" digest="SHA-256"/>
    </target>

    <target name="idem-sign-idem2edugain" depends="get.sign.idem.keyPassword">
        <echo>Signing unsigned aggregates.</echo>

        <echo>Signing idem2edugain metadata.</echo>
        <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed}" digest="SHA-256"/>
    </target>

    <target name="idem-sign-edugain2idem" depends="get.sign.idem.keyPassword">
        <echo>Signing unsigned aggregates.</echo>

        <echo>Signing edugain2idem metadata.</echo>
        <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed}" digest="SHA-256"/>
    </target>
-->
    <!--
        Verify UK federation metadata with both verification tools.

        This should be used when the metadata needs to be compatible
        with the Shibboleth 1.3 IdP.
    -->
    <macrodef name="VFY.idem">
        <attribute name="i"/>
        <sequential>
            <!--
                Verify using xmlsectool.
            -->
            <XMLSECTOOL.VFY.idem i="@{i}"/>

        </sequential>
    </macrodef>

    <!--
        Verify the signed aggregates.
    -->
    <target name="idem-verify">
        <echo>Verification start...</echo>

        <echo>Verifying signed idem-test-metadata-sha256.</echo>
        <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha1}"/>
        <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha256}"/>

        <echo>Verifying signed idem-metadata-sha256.</echo>
        <VFY.idem i="${output.dir}/${idem.metadata.signed.sha1}"/>
        <VFY.idem i="${output.dir}/${idem.metadata.signed.sha256}"/>

        <echo>Verifying signed idem2edugain-metadata-sha256.</echo>
        <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha1}"/>
        <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha256}"/>

        <echo>Verifying signed edugain2idem-metadata-sha256.</echo>
        <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha1}"/>
        <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha256}"/>

        <echo>...Verification completed.</echo>
    </target>

    <!--
        *********************************************
        ***                                       ***
        ***   M E T A D A T A   E X C H A N G E   ***
        ***                                       ***
        *********************************************
    -->

    <!--
        Aggregator based work is divided into channels, each of
        which lives in a directory under /mdx/.  Each channel
        can have a number of verbs which can be executed.

        Conventions for this system are documented in
        /mdx/conventions.md.
    -->

    <!--
        CHANNEL.do

        Run a particular flow in the named channel.
    -->
    <macrodef name="CHANNEL.do">
        <attribute name="channel"/><!-- channel name -->
        <attribute name="verb"/><!-- verb to perform -->
        <sequential>
            <echo>Running @{channel} @{verb} flow.</echo>
            <if>
                <available file="${mdx.dir}/@{channel}/@{verb}.xml"/>
                <then>
                    <MDA config="${mdx.dir}/@{channel}/@{verb}.xml"
                        pipeline="@{verb}"/>
                </then>
                <else>
                    <MDA config="${mdx.dir}/@{channel}/verbs.xml"
                        pipeline="@{verb}"/>
                </else>
            </if>
            <echo>Completed @{channel} @{verb} flow.</echo>
        </sequential>
    </macrodef>

    <!--
        *******************************************************************
        ***                                                             ***
        ***   M D X :   N O N - P R O D U C T I O N   C H A N N E L S   ***
        ***                                                             ***
        *******************************************************************
    -->
    
    <!-- FLOW TO IDEM TEST CHECK -->

    <target name="idem-test-check">
         <CHANNEL.do channel="it_idem" verb="idem-test-check"/>
    </target>

    <!-- FLOW TO IDEM PROD CHECK -->
    <target name="idem-prod-check">
         <CHANNEL.do channel="it_idem" verb="idem-prod-check"/>
    </target>

    <!-- FLOW TO IDEM-2-EDUGAIN CHECK -->
    <target name="idem2edugain-check">
         <CHANNEL.do channel="it_idem" verb="idem2edugain-check"/>
    </target>

    <!-- FLOW TO EDUGAIN-2-IDEM CHECK -->
    <target name="edugain2idem-check">
         <CHANNEL.do channel="it_idem" verb="edugain2idem-check"/>
    </target>


    <!-- UNSIGNED FLOWS -->

    <target name="idem-unsigned-test">
         <CHANNEL.do channel="it_idem" verb="idem-test-check"/>
         <CHANNEL.do channel="it_idem" verb="idem-test-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem-test-metadata.xml"/>
    </target>

    <target name="idem-unsigned-prod">
         <CHANNEL.do channel="it_idem" verb="idem-prod-check"/>
         <CHANNEL.do channel="it_idem" verb="idem-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem-metadata.xml"/>
    </target>

    <target name="idem-unsigned-idem2edugain">
         <CHANNEL.do channel="it_idem" verb="idem2edugain-check"/>
         <CHANNEL.do channel="it_idem" verb="idem2edugain-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem2edugain-metadata.xml"/>
    </target>

    <target name="idem-unsigned-edugain2idem">
         <CHANNEL.do channel="it_idem" verb="edugain2idem-check"/>
         <CHANNEL.do channel="it_idem" verb="edugain2idem-metadata"/>
         <MDNORM.noblank i="${output.dir}/edugain2idem-metadata.xml"/>
    </target>

    <target name="idem-unsigned-all">
         <CHANNEL.do channel="it_idem" verb="idem-test-check"/>
         <CHANNEL.do channel="it_idem" verb="idem-test-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem-test-metadata.xml"/>

         <CHANNEL.do channel="it_idem" verb="idem-prod-check"/>
         <CHANNEL.do channel="it_idem" verb="idem-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem-metadata.xml"/>

         <CHANNEL.do channel="it_idem" verb="idem2edugain-check"/>
         <CHANNEL.do channel="it_idem" verb="idem2edugain-metadata"/>
         <MDNORM.noblank i="${output.dir}/idem2edugain-metadata.xml"/>

         <CHANNEL.do channel="it_idem" verb="edugain2idem-check"/>
         <CHANNEL.do channel="it_idem" verb="edugain2idem-metadata"/>
         <MDNORM.noblank i="${output.dir}/edugain2idem-metadata.xml"/>
    </target>


    <!-- UNSIGNED + SIGNED FLOWS -->

    <target name="idem-signed-test" depends="get.sign.idem.keyPassword">
         <echo>Create IDEM Test metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem-test-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM Test metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem-test-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM Test metadata...</echo>
         <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM Test Metadata: Created.</echo>
<!--
         <echo>Verify IDEM Test Metadata signature...</echo>
         <echo>Verifying signed idem-test-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha1}"/>
         <echo>...verified.</echo>
         
         <echo>Verifying signed idem-test-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
    </target>

    <target name="idem-signed-prod" depends="get.sign.idem.keyPassword">
         <echo>Create IDEM Production metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM Production metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM Production metadata.</echo>
         <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM Production Metadata: Created.</echo>
<!--
         <echo>Verify IDEM Test Metadata signature...</echo>
         <echo>   Verifying signed idem-metadata-sha1...</echo>
         <VFY.idem i="${output.dir}/${idem.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>   Verifying signed idem-metadata-sha256...</echo>
         <VFY.idem i="${output.dir}/${idem.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
   </target>

    <target name="idem-signed-idem2edugain" depends="get.sign.idem.keyPassword">
         <echo>Create IDEM idem2edugain metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem2edugain-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM idem2edugain metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem2edugain-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM idem2edugain metadata.</echo>
         <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM idem2edugain Metadata: Created.</echo>
<!--
         <echo>Verify IDEM idem2edugain signature...</echo>
         <echo>   Verifying signed idem2edugain-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>   Verifying signed idem2edugain-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
    </target>

    <target name="idem-signed-edugain2idem" depends="get.sign.idem.keyPassword">
         <echo>Create IDEM edugain2idem metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="edugain2idem-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM edugain2idem metadata...</echo>
         <MDNORM.noblank i="${output.dir}/edugain2idem-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM edugain2idem metadata.</echo>
         <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM edugain2idem Metadata: Created.</echo>
<!--
         <echo>Verify IDEM edugain2idem signature...</echo>

         <echo>Verifying signed edugain2idem-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>Verifying signed edugain2idem-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
    </target>

    <target name="idem-signed-all" depends="get.sign.idem.keyPassword">
         <echo>Create IDEM Test metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem-test-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM Test metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem-test-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM Test metadata...</echo>
         <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem.test.metadata.unsigned}" o="${output.dir}/${idem.test.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM Test Metadata: Created.</echo>
<!--
         <echo>Verify IDEM Test Metadata signature...</echo>
         <echo>Verifying signed idem-test-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha1}"/>
         <echo>...verified.</echo>
         
         <echo>Verifying signed idem-test-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${idem.test.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
         <echo>Create IDEM Production metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM Production metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM Production metadata.</echo>
         <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem.metadata.unsigned}" o="${output.dir}/${idem.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM Production Metadata: Created.</echo>
<!--
         <echo>Verify IDEM Test Metadata signature...</echo>
         <echo>   Verifying signed idem-metadata-sha1...</echo>
         <VFY.idem i="${output.dir}/${idem.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>   Verifying signed idem-metadata-sha256...</echo>
         <VFY.idem i="${output.dir}/${idem.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
         <echo>Create IDEM idem2edugain metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="idem2edugain-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM idem2edugain metadata...</echo>
         <MDNORM.noblank i="${output.dir}/idem2edugain-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM idem2edugain metadata.</echo>
         <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${idem2edugain.metadata.unsigned}" o="${output.dir}/${idem2edugain.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM idem2edugain Metadata: Created.</echo>
<!--
         <echo>Verify IDEM idem2edugain signature...</echo>
         <echo>   Verifying signed idem2edugain-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>   Verifying signed idem2edugain-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${idem2edugain.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
         <echo>Create IDEM edugain2idem metadata...</echo>
         <CHANNEL.do channel="it_idem" verb="edugain2idem-metadata"/>
         <echo>...done.</echo>

         <echo>Normalise IDEM edugain2idem metadata...</echo>
         <MDNORM.noblank i="${output.dir}/edugain2idem-metadata.xml"/>
         <echo>...done.</echo>

         <echo>Signing IDEM edugain2idem metadata.</echo>
         <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed.sha1}" digest="SHA-1"/>
         <SIGN.idem i="${output.dir}/${edugain2idem.metadata.unsigned}" o="${output.dir}/${edugain2idem.metadata.signed.sha256}" digest="SHA-256"/>
         <echo>...done.</echo>

         <echo>IDEM edugain2idem Metadata: Created.</echo>
<!--
         <echo>Verify IDEM edugain2idem signature...</echo>

         <echo>Verifying signed edugain2idem-metadata-sha1.</echo>
         <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha1}"/>
         <echo>...verified.</echo>

         <echo>Verifying signed edugain2idem-metadata-sha256.</echo>
         <VFY.idem i="${output.dir}/${edugain2idem.metadata.signed.sha256}"/>
         <echo>...verified.</echo>

         <echo>OK</echo>
-->
    </target>

    <!--
        echoproperties

        List all the properties ant is using.
    -->
    <target name="echoproperties">
        <echo>All properties:</echo>
        <echoproperties/>
        <echo>MDA properties:</echo>
        <echoproperties>
            <propertyset>
                <propertyset refid="mda.properties"/>
            </propertyset>
        </echoproperties>
    </target>

</project>
