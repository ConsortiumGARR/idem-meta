<?xml version="1.0" encoding="UTF-8"?>

<!--
	Federation metadata signing process for the UK federation.
	
	* "ant process" generates the other files from the master file, and
	  signs as appropriate.  Requires the keystore password.
	  
	* "ant push" sends all files to the remote site, and requires
	  the remote site password.
-->
<project default="process">
    
	<!--
		Accessing the remote system.
	-->
	<property name="remote.host" value="bodach.ucs.ed.ac.uk"/>
	<property name="remote.user" value="sdssweb"/>
	<property name="remote.dir.sdss" value="dev/fed"/>
	<property name="remote.loc.sdss" value="${remote.user}@${remote.host}:${remote.dir.sdss}"/>
	<property name="remote.dir.uk" value="metadata"/>
	<property name="remote.loc.uk" value="${remote.user}@${remote.host}:${remote.dir.uk}"/>

	<!--
		Local specialised directories.
	-->
	<property name="build.dir" value="${basedir}/build"/>
	<property name="endorsed.dir" value="endorsed"/>
	<property name="entities.dir" value="entities"/>
	<property name="lib.dir" value="lib"/>
	<property name="templates.dir" value="templates"/>
	<property name="xalan.dir" value="xalan-j_2_6_0"/>
	<property name="xml.dir" value="xml"/>

	<!--
		Additional ANT task definitions.
	-->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<!--
		The first phase in the signing process is to concatenate the
		individual entity fragment files (uk*.xml in the entities directory)
		together and enclose them in an <Entities> element.
		
		The resulting file [1] entities.xml contains *all* entities,
		even deleted ones, and contains some information we don't ultimately
		want to publish.  entities.xml itself is neither stored
		in the repository nor published.
	-->
	<property name="entities.file.dir" value="${xml.dir}"/>
	<property name="entities.file.name" value="entities.xml"/>
	<property name="entities.file" value="${entities.file.dir}/${entities.file.name}"/>

	<!--
		The master file contains the UK federation's KeyAuthority descriptors.
	-->
	<property name="master.file.dir" value="${xml.dir}"/>
	<property name="master.file.name" value="master.xml"/>
	<property name="master.file" value="${master.file.dir}/${master.file.name}"/>
	
	<!--
		The full, unfiltered entities.xml is combined with the UK federation
		trust roots (from master.xml) to produce the "UK federation master file"
		([2] ukfederation-metadata-master.xml).  This drops entities marked as
		deleted.  Although the file by this stage conforms to UK federation
		conventions, it may still contain information not intended for
		publication.
	-->
	<property name="uk.master.file" value="ukfederation-metadata-master.xml"/>
	
	<!--
		The UK federation master file is then processed to remove housekeeping
		information, resulting in the UK federation's unsigned metadata file,
		[19] ukfederation-metadata-unsigned.xml.
	-->
	<property name="uk.metadata.unsigned" value="ukfederation-metadata-unsigned.xml"/>

	<!--
		From there, the process (with indentation implying the creation
		hierarchy) is:
		
		[19]	ukfederation-metadata-unsigned.xml
		[20]		ukfederation-metadata.xml
		[21]		ukfederation-sites-12-unsigned.xml
		[22]			ukfederation-sites-12.xml
		[23]		ukfederation-trust-12-unsigned.xml
		[24]			ukfederation-trust-12.xml
		[25]		ukfederation-wayf-unsigned.xml
		[26]			ukfederation-wayf.xml
		
		The numbers in brackets are duplicated in the script where the file in
		question is created.  Some numbers are missing because some old format
		files are no longer being generated.
	-->

	<!--
		Null device location.
	-->
	<condition property="null.device"
		value="nul:" else="/dev/null">
		<os family="windows"/>
	</condition>

	<!--
		Signing keystore type.
		
		On Windows, we use a hard token accessed through PKCS#11.
		On Mac, we use a Java Keystore.
	-->
	<condition property="keystore.uk.sign.type"
		value="PKCS11" else="JKS">
		<os family="windows"/>
	</condition>

	<!--
		Signing keystore location.
		
		On Windows, because we're using PKCS#11, we use an explicit NONE.
		Otherwise, the keystore lives on the UK_KEYS volume.
	-->
	<condition property="keystore.uk.sign.loc"
		value="NONE" else="/Volumes/UK_KEYS/ukfederation-sign.jks">
		<os family="windows"/>
	</condition>

	<!--
		Signing keystore alias.
	-->
	<property name="keystore.uk.sign.alias" value="ukfederation"/>

	<!--
		Verification keystore.
	-->
	<property name="keystore.uk.vfy.loc" value="${build.dir}/ukfederation.jks"/>
	<property name="keystore.uk.vfy.alias" value="ukfederation"/>
	
	<property name="known.hosts" value="${build.dir}/known_hosts"/>

	<!--
		Standard processing: generate, sign, then verify.
	-->
	<target name="process" depends="get.keystore.pass, generate, sign, verify, stats">
		<echo>Processing complete.</echo>
	</target>

	<!--
		Acquire the remote password.
	-->
	<target name="get.remote.pass" unless="remote.pass">
		<input addproperty="remote.pass">
			Please enter the password for ${remote.user} on ${remote.host}:
		</input>
	</target>

	<!--
		Push all generated XML files, and entity fragment files, to the remote machine.
	-->
	<target name="push" depends="get.remote.pass">
		<!--
			Push metadata files to the old SDSS federation location.
			
			Nowadays, these are not SDSS federation metadata files but other
			miscellaneous files such as UK federation statistics.
		-->
		<echo>Pushing non-metadata files.</echo>
		<scp failonerror="true" password="${remote.pass}" remoteTodir="${remote.loc.sdss}"
				knownhosts="${known.hosts}">
			<fileset dir="${xml.dir}">
				<include name="members.xml"/>
				<include name="ukfederation-members.xsd"/>
				<include name="ukfederation-stats.html"/>
			</fileset>
		</scp>
		<!--
			Push metadata files for the UK Federation.
		-->
		<echo>Pushing UK Federation metadata files.</echo>
		<scp failonerror="true" password="${remote.pass}" remoteTodir="${remote.loc.uk}"
				knownhosts="${known.hosts}">
			<fileset dir="${xml.dir}">
				<include name="ukfederation-metadata.xml"/>
				<include name="ukfederation-sites-12.xml"/>
				<include name="ukfederation-trust-12.xml"/>
				<include name="ukfederation-wayf.xml"/>
			</fileset>
		</scp>
	</target>

	<!--
		Generate unsigned metadata.
	-->
	<target name="generate" depends="gen.uk">
		<echo>Generated unsigned metadata.</echo>
	</target>
	
	<!--
		Macro to run the Xalan XSLT engine, taking files from pre-defined
		locations.
	-->
	<macrodef name="XALAN">
		<attribute name="i"/>
		<attribute name="o"/>
		<attribute name="x"/>
		<sequential>
			<java fork="true" failonerror="true" classname="org.apache.xalan.xslt.Process">
				<classpath location="${xalan.dir}/bin/xalan.jar"/>
				<arg value="-IN"/>
				<arg value="${xml.dir}/@{i}"/>
				<arg value="-OUT"/>
				<arg value="${xml.dir}/@{o}"/>
				<arg value="-XSL"/>
				<arg value="${build.dir}/@{x}"/>
			</java>
		</sequential>
	</macrodef>

	<!--
		gen.entities
		
		Concatenates the (potentially many) entity fragment files together into a single file
		wrapping the entities in an <Entities> element.  This can then be dragged in by the document
		function in XSLT.
	-->
	<target name="gen.entities">
		<echo>Composing entity fragment files.</echo>
		<!-- [1] -->
		<concat destfile="${entities.file}" append="no" force="yes" fixlastline="no">
			<header filtering="no">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#10;&lt;Entities&gt;&#10;</header>
			<fileset dir="${entities.dir}" includes="uk*.xml"/>
			<footer>&lt;/Entities&gt;&#10;</footer>
			<filterchain>
				<replaceregex pattern="&lt;\?[xX][mM][lL] .*&gt;" />
			</filterchain>
		</concat>
	</target>
	
	<!--
		Unsigned metadata generation for the UK Federation.
	-->

	<target name="gen.uk" depends="gen.uk.unsigned, gen.uk.1.2, gen.uk.wayf">
		<echo>Generated UK unsigned metadata.</echo>
	</target>

	<target name="gen.uk.master" depends="gen.entities">
		<echo>Generating UK federation master file.</echo>
		<!-- [2] -->
		<XALAN x="master_ukfederation.xsl" i="${master.file.name}"
			o="${uk.master.file}" />
	</target>
	
	<target name="gen.uk.unsigned" depends="gen.uk.master">
		<echo>Generating unsigned UK metadata file.</echo>
		<!-- [19] -->
		<XALAN x="uk_master_unsigned.xsl" i="${uk.master.file}"
			o="${uk.metadata.unsigned}" />
	</target>
	
	<target name="gen.uk.1.2">
		<echo>Generating unsigned UK V1.2 metadata.</echo>
		<!-- [21] -->
		<XALAN x="v13_to_v12_sites.xsl" i="${uk.metadata.unsigned}"
			o="ukfederation-sites-12-unsigned.xml"/>
		<!-- [23] -->
		<XALAN x="v13_to_v12_trust.xsl" i="${uk.metadata.unsigned}"
			o="ukfederation-trust-12-unsigned.xml"/>
	</target>
	
	<target name="gen.uk.wayf">
		<echo>Generating unsigned UK WAYF metadata.</echo>
		<!-- [25] -->
		<XALAN x="master_to_wayf.xsl" i="${uk.metadata.unsigned}"
			o="ukfederation-wayf-unsigned.xml"/>
	</target>

	<!--
		Acquire the keystore password.
	-->
	<target name="get.keystore.pass" unless="keystore.pass">
		<input addproperty="keystore.pass">
			Please enter the password for the keystores:
		</input>
	</target>

	<!--
		Macro to run the metadatatool application with appropriate defaults.
	-->
	<macrodef name="MDT">
		<attribute name="i"/><!-- input file, assumed to be in the XML directory -->
		<attribute name="o"/><!-- output file location -->
		<attribute name="keystore"/><!-- keystore file location -->
		<attribute name="storetype" default="JKS"/><!-- type of keystore to use -->
		<attribute name="alias"/><!-- alias of key to use -->
		<element name="args" optional="yes"/>
		<sequential>
			<java classname="edu.internet2.middleware.shibboleth.utils.MetadataTool"
				fork="true" failonerror="true">
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="**/*.jar"/>
					</fileset>
				</classpath>
				<jvmarg value="-Djava.endorsed.dirs=endorsed"/>
				<!--
				<jvmarg value="-Dlog4j.configuration=log4j.properties"/>
				-->
				<args/>
				<arg value="--keystore"/>
				<arg value="@{keystore}"/>
				<arg value="--storetype"/>
				<arg value="@{storetype}"/>
				<arg value="--alias"/>
				<arg value="@{alias}"/>
				<arg value="--in"/>
				<arg value="${xml.dir}/@{i}"/>
				<arg value="--out"/>
				<arg value="@{o}"/>
			</java>
		</sequential>
	</macrodef>
	
	<!--
		Sign the various metadata files.
	-->
	
	<macrodef name="SIGN.uk">
		<attribute name="i"/>
		<attribute name="o"/>
		<sequential>
			<MDT i="@{i}" o="${xml.dir}/@{o}"
				keystore="${keystore.uk.sign.loc}"
				storetype="${keystore.uk.sign.type}"
				alias="${keystore.uk.sign.alias}">
				<args>
					<arg value="--sign"/>
					<arg value="--password"/>
					<arg value="${keystore.pass}"/>
				</args>
			</MDT>
		</sequential>
	</macrodef>
	
	<target name="sign">
		<echo>Signing UK V1.3 metadata.</echo>
		<!-- [20] -->
		<SIGN.uk i="${uk.master.file}" o="ukfederation-metadata.xml"/>

		<echo>Signing UK V1.2 metadata.</echo>
		<!-- [22] -->
		<SIGN.uk i="ukfederation-sites-12-unsigned.xml"
			o="ukfederation-sites-12.xml"/>
		<!-- [24] -->
		<SIGN.uk i="ukfederation-trust-12-unsigned.xml"
			o="ukfederation-trust-12.xml"/>

		<echo>Signing UK WAYF metadata.</echo>
		<!-- [26] -->
		<SIGN.uk i="ukfederation-wayf-unsigned.xml" o="ukfederation-wayf.xml"/>

		<echo>Generated signed UK metadata.</echo>
	</target>
	
	<!--
		Verification of the UK Federation metadata.
	-->
	<macrodef name="VFY.uk">
		<attribute name="i"/>
		<sequential>
			<MDT i="@{i}" o="${null.device}" keystore="${keystore.uk.vfy.loc}" alias="${keystore.uk.vfy.alias}"/>
		</sequential>
	</macrodef>
		
	<!--
		Verify the signed metadata files.
	-->
	<target name="verify">
		<echo>Verifying signed UK V1.3 metadata.</echo>
		<VFY.uk i="ukfederation-metadata.xml"/>

		<echo>Verifying signed UK V1.2 metadata.</echo>
		<VFY.uk i="ukfederation-sites-12.xml"/>
		<VFY.uk i="ukfederation-trust-12.xml"/>

		<echo>Verifying signed UK WAYF metadata.</echo>
		<VFY.uk i="ukfederation-wayf.xml"/>

		<echo>Verification completed.</echo>
	</target>
	
	<!--
		Statistics generation
		
		Note that statistics are generated from the UK federation master file,
		so that the statistics process has access to information that will not
		be included in published metadata.
	-->
	<target name="stats" depends="gen.uk.unsigned">
		<echo>Generating UK Federation statistics</echo>
		<XALAN
			i="${uk.master.file}"
			o="ukfederation-stats.html"
			x="statistics.xsl"/>
		<fixcrlf file="${xml.dir}/ukfederation-stats.html" eol="lf"/>
	</target>
	
	<!--
		Extract authorities
	-->
	<target name="extract.authorities">
		<echo>Extracting key authorities</echo>
		<XALAN
			i="master.xml"
			o="authorities.pem"
			x="extract_authorities.xsl"/>
	</target>
	
	<!--
		Check authorities
	-->
	<target name="check.authorities">
		<echo>Checking authority certificates</echo>
		<exec executable="perl" dir="${xml.dir}"
			input="${xml.dir}/authorities.pem">
			<arg value="${build.dir}/check_authorities.pl"/>
		</exec>
	</target>

	<!--
		Extract member list for joining date backfill.
	-->
	<target name="extract.member.dates">
		<echo>Extracting member dates</echo>
		<XALAN
			i="members.xml"
			o="member-dates.txt"
			x="extract_member_dates.xsl"/>
	</target>

	<!--
		Utility to fold overlong embedded certificates.
	-->
	<target name="fold.embedded.certs">
		<echo>Folding embedded certificates</echo>
		<for param="file">
			<path>
				<fileset dir="${entities.dir}" includes="uk*.xml"/>
			</path>
			<sequential>
				<exec executable="perl" dir="${entities.dir}">
					<arg value="-i"/>
					<arg value="${build.dir}/fold_cert.pl"/>
					<arg value="@{file}"/>
				</exec>
			</sequential>
		</for>
	</target>
	
	<!--
		Extract embedded certificates
	-->
	<target name="extract.embedded" depends="gen.uk">
		<echo>Extracting embedded certificates</echo>
		<XALAN
			i="ukfederation-metadata-unsigned.xml"
			o="embedded.pem"
			x="extract_embedded.xsl"/>
	</target>
	
	<!--
		Check embedded certificates.
	-->
	<target name="check.embedded" depends="extract.embedded">
		<echo>Checking embedded certificates</echo>
		<exec executable="perl" dir="${xml.dir}"
			input="${xml.dir}/embedded.pem">
			<arg value="${build.dir}/check_embedded.pl"/>
		</exec>
	</target>
	
</project>